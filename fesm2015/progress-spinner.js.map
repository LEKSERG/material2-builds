{"version":3,"file":"progress-spinner.js","sources":["../npm_package.es6/src/material/progress-spinner/progress-spinner.js","../progress-spinner/progress-spinner-module.ts","../progress-spinner/index.ts"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, ElementRef, Inject, InjectionToken, Input, Optional, ViewEncapsulation, } from '@angular/core';\nimport { mixinColor } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * Base reference size of the spinner.\n * \\@docs-private\n * @type {?}\n */\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * \\@docs-private\n * @type {?}\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/**\n * \\@docs-private\n */\nclass MatProgressSpinnerBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatProgressSpinnerBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/**\n * Default `mat-progress-spinner` options that can be overridden.\n * @record\n */\nexport function MatProgressSpinnerDefaultOptions() { }\nif (false) {\n    /**\n     * Diameter of the spinner.\n     * @type {?|undefined}\n     */\n    MatProgressSpinnerDefaultOptions.prototype.diameter;\n    /**\n     * Width of the spinner's stroke.\n     * @type {?|undefined}\n     */\n    MatProgressSpinnerDefaultOptions.prototype.strokeWidth;\n    /**\n     * Whether the animations should be force to be enabled, ignoring if the current environment is\n     * using NoopAnimationsModule.\n     * @type {?|undefined}\n     */\n    MatProgressSpinnerDefaultOptions.prototype._forceAnimations;\n}\n/**\n * Injection token to be used to override the default options for `mat-progress-spinner`.\n * @type {?}\n */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\n/** @type {?} */\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} platform\n     * @param {?} _document\n     * @param {?} animationMode\n     * @param {?=} defaults\n     */\n    constructor(_elementRef, platform, _document, animationMode, defaults) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._diameter = BASE_SIZE;\n        this._value = 0;\n        this._fallbackAnimation = false;\n        /**\n         * Mode of the progress circle\n         */\n        this.mode = 'determinate';\n        /** @type {?} */\n        const trackedDiameters = MatProgressSpinner._diameters;\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n        this._noopAnimations = animationMode === 'NoopAnimations' &&\n            (!!defaults && !defaults._forceAnimations);\n        if (defaults) {\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n    }\n    /**\n     * The diameter of the progress spinner (will set width and height of svg).\n     * @return {?}\n     */\n    get diameter() { return this._diameter; }\n    /**\n     * @param {?} size\n     * @return {?}\n     */\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n        if (!this._fallbackAnimation && this._styleRoot) {\n            this._attachStyleNode();\n        }\n    }\n    /**\n     * Stroke width of the progress spinner.\n     * @return {?}\n     */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /**\n     * Value of the progress circle.\n     * @return {?}\n     */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element, this._document) || this._document.head;\n        this._attachStyleNode();\n        // On IE and Edge, we can't animate the `stroke-dashoffset`\n        // reliably so we fall back to a non-spec animation.\n        /** @type {?} */\n        const animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n        element.classList.add(animationClass);\n    }\n    /**\n     * The radius of the spinner, adjusted for stroke width.\n     * @return {?}\n     */\n    get _circleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /**\n     * The view box of the spinner's svg element.\n     * @return {?}\n     */\n    get _viewBox() {\n        /** @type {?} */\n        const viewBox = this._circleRadius * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /**\n     * The stroke circumference of the svg circle.\n     * @return {?}\n     */\n    get _strokeCircumference() {\n        return 2 * Math.PI * this._circleRadius;\n    }\n    /**\n     * The dash offset of the svg circle.\n     * @return {?}\n     */\n    get _strokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return this._strokeCircumference * (100 - this._value) / 100;\n        }\n        // In fallback mode set the circle to 80% and rotate it with CSS.\n        if (this._fallbackAnimation && this.mode === 'indeterminate') {\n            return this._strokeCircumference * 0.2;\n        }\n        return null;\n    }\n    /**\n     * Stroke width of the circle in percent.\n     * @return {?}\n     */\n    get _circleStrokeWidth() {\n        return this.strokeWidth / this.diameter * 100;\n    }\n    /**\n     * Dynamically generates a style tag containing the correct animation for this diameter.\n     * @private\n     * @return {?}\n     */\n    _attachStyleNode() {\n        /** @type {?} */\n        const styleRoot = this._styleRoot;\n        /** @type {?} */\n        const currentDiameter = this._diameter;\n        /** @type {?} */\n        const diameters = MatProgressSpinner._diameters;\n        /** @type {?} */\n        let diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            /** @type {?} */\n            const styleTag = this._document.createElement('style');\n            styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    }\n    /**\n     * Generates animation styles adjusted for the spinner's diameter.\n     * @private\n     * @return {?}\n     */\n    _getAnimationText() {\n        return INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this.diameter}`);\n    }\n}\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatProgressSpinner._diameters = new WeakMap();\nMatProgressSpinner.decorators = [\n    { type: Component, args: [{\n                moduleId: module.id,\n                selector: 'mat-progress-spinner',\n                exportAs: 'matProgressSpinner',\n                host: {\n                    'role': 'progressbar',\n                    'class': 'mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter',\n                    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                    '[attr.mode]': 'mode',\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_viewBox\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}/*# sourceMappingURL=progress-spinner.css.map */\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatProgressSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\nMatProgressSpinner.propDecorators = {\n    diameter: [{ type: Input }],\n    strokeWidth: [{ type: Input }],\n    mode: [{ type: Input }],\n    value: [{ type: Input }]\n};\nif (false) {\n    /**\n     * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n     * We need to keep track of which elements the diameters were attached to, because for\n     * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n     * than the document head.\n     * @type {?}\n     * @private\n     */\n    MatProgressSpinner._diameters;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatProgressSpinner.prototype._diameter;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatProgressSpinner.prototype._value;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatProgressSpinner.prototype._strokeWidth;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatProgressSpinner.prototype._fallbackAnimation;\n    /**\n     * Element to which we should add the generated style tags for the indeterminate animation.\n     * For most elements this is the document, but for the ones in the Shadow DOM we need to\n     * use the shadow root.\n     * @type {?}\n     * @private\n     */\n    MatProgressSpinner.prototype._styleRoot;\n    /**\n     * Whether the _mat-animation-noopable class should be applied, disabling animations.\n     * @type {?}\n     */\n    MatProgressSpinner.prototype._noopAnimations;\n    /**\n     * Mode of the progress circle\n     * @type {?}\n     */\n    MatProgressSpinner.prototype.mode;\n    /** @type {?} */\n    MatProgressSpinner.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatProgressSpinner.prototype._document;\n}\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nexport class MatSpinner extends MatProgressSpinner {\n    /**\n     * @param {?} elementRef\n     * @param {?} platform\n     * @param {?} document\n     * @param {?} animationMode\n     * @param {?=} defaults\n     */\n    constructor(elementRef, platform, document, animationMode, defaults) {\n        super(elementRef, platform, document, animationMode, defaults);\n        this.mode = 'indeterminate';\n    }\n}\nMatSpinner.decorators = [\n    { type: Component, args: [{\n                moduleId: module.id,\n                selector: 'mat-spinner',\n                host: {\n                    'role': 'progressbar',\n                    'mode': 'indeterminate',\n                    'class': 'mat-spinner mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter',\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_viewBox\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}/*# sourceMappingURL=progress-spinner.css.map */\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\n/**\n * Gets the shadow root of an element, if supported and the element is inside the Shadow DOM.\n * @param {?} element\n * @param {?} _document\n * @return {?}\n */\nexport function _getShadowRoot(element, _document) {\n    // TODO(crisbeto): see whether we should move this into the CDK\n    // feature detection utilities once #15616 gets merged in.\n    if (typeof window !== 'undefined') {\n        /** @type {?} */\n        const head = _document.head;\n        // Check whether the browser supports Shadow DOM.\n        if (head && (((/** @type {?} */ (head))).createShadowRoot || head.attachShadow)) {\n            /** @type {?} */\n            const rootNode = element.getRootNode ? element.getRootNode() : null;\n            // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n            // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n            if (rootNode instanceof ((/** @type {?} */ (window))).ShadowRoot) {\n                return rootNode;\n            }\n        }\n    }\n    return null;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}
{"version":3,"file":"menu__testing.js","sources":["../menu/testing/menu-harness.ts","../menu/testing/menu-item-harness.ts","../menu/testing/public-api.ts","../menu/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MenuHarnessFilters} from './menu-harness-filters';\nimport {MatMenuItemHarness} from './menu-item-harness';\n\n/**\n * Harness for interacting with a standard mat-menu in tests.\n * @dynamic\n */\nexport class MatMenuHarness extends ComponentHarness {\n  static hostSelector = '.mat-menu-trigger';\n\n  // TODO: potentially extend MatButtonHarness\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a menu with specific attributes.\n   * @param options Options for narrowing the search:\n   *   - `selector` finds a menu whose host element matches the given selector.\n   *   - `label` finds a menu with specific label text.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: MenuHarnessFilters = {}): HarnessPredicate<MatMenuHarness> {\n    return new HarnessPredicate(MatMenuHarness, options)\n        .addOption('text', options.triggerText,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getTriggerText(), text));\n  }\n\n  /** Gets a boolean promise indicating if the menu is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  async isOpen(): Promise<boolean> {\n    throw Error('not implemented');\n  }\n\n  async getTriggerText(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Focuses the menu and returns a void promise that indicates when the action is complete. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the menu and returns a void promise that indicates when the action is complete. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  async open(): Promise<void> {\n    throw Error('not implemented');\n  }\n\n  async close(): Promise<void> {\n    throw Error('not implemented');\n  }\n\n  async getItems(): Promise<MatMenuItemHarness[]> {\n    throw Error('not implemented');\n  }\n\n  async getItemLabels(): Promise<string[]> {\n    throw Error('not implemented');\n  }\n\n  async getItemByLabel(): Promise<MatMenuItemHarness> {\n    throw Error('not implemented');\n  }\n\n  async getItemByIndex(): Promise<MatMenuItemHarness> {\n    throw Error('not implemented');\n  }\n\n  async getFocusedItem(): Promise<MatMenuItemHarness> {\n    throw Error('not implemented');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MenuItemHarnessFilters} from './menu-harness-filters';\n\n\n/**\n * Harness for interacting with a standard mat-menu in tests.\n * @dynamic\n */\nexport class MatMenuItemHarness extends ComponentHarness {\n  static hostSelector = '.mat-menu-item';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a menu with specific attributes.\n   * @param options Options for narrowing the search:\n   *   - `selector` finds a menu item whose host element matches the given selector.\n   *   - `label` finds a menu item with specific label text.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: MenuItemHarnessFilters = {}): HarnessPredicate<MatMenuItemHarness> {\n    return new HarnessPredicate(MatMenuItemHarness, options); // TODO: add options here\n  }\n\n  /** Gets a boolean promise indicating if the menu is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  async getText(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Focuses the menu and returns a void promise that indicates when the action is complete. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the menu and returns a void promise that indicates when the action is complete. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './menu-harness';\nexport * from './menu-harness-filters';\nexport * from './menu-item-harness';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;AAAA;;;;;;;AAaA;;;;AAIA,MAAa,cAAe,SAAQ,gBAAgB;;;;;;;;;IAYlD,OAAO,IAAI,CAAC,UAA8B,EAAE;QAC1C,OAAO,IAAI,gBAAgB,CAAC,cAAc,EAAE,OAAO,CAAC;aAC/C,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,WAAW,EAClC,CAAC,OAAO,EAAE,IAAI,KAAK,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;KAC5F;;IAGK,UAAU;;YACd,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC;YAC9D,OAAO,qBAAqB,CAAC,MAAM,QAAQ,CAAC,CAAC;SAC9C;KAAA;IAEK,MAAM;;YACV,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAC;SAChC;KAAA;IAEK,cAAc;;YAClB,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC;SACnC;KAAA;;IAGK,KAAK;;YACT,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC;SACpC;KAAA;;IAGK,IAAI;;YACR,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC;SACnC;KAAA;IAEK,IAAI;;YACR,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAC;SAChC;KAAA;IAEK,KAAK;;YACT,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAC;SAChC;KAAA;IAEK,QAAQ;;YACZ,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAC;SAChC;KAAA;IAEK,aAAa;;YACjB,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAC;SAChC;KAAA;IAEK,cAAc;;YAClB,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAC;SAChC;KAAA;IAEK,cAAc;;YAClB,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAC;SAChC;KAAA;IAEK,cAAc;;YAClB,MAAM,KAAK,CAAC,iBAAiB,CAAC,CAAC;SAChC;KAAA;;AAnEM,2BAAY,GAAG,mBAAmB,CAAC;;AClB5C;;;;;;;AAaA;;;;AAIA,MAAa,kBAAmB,SAAQ,gBAAgB;;;;;;;;IAUtD,OAAO,IAAI,CAAC,UAAkC,EAAE;QAC9C,OAAO,IAAI,gBAAgB,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;KAC1D;;IAGK,UAAU;;YACd,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC;YAC9D,OAAO,qBAAqB,CAAC,MAAM,QAAQ,CAAC,CAAC;SAC9C;KAAA;IAEK,OAAO;;YACX,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC;SACnC;KAAA;;IAGK,KAAK;;YACT,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC;SACpC;KAAA;;IAGK,IAAI;;YACR,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC;SACnC;KAAA;;AA/BM,+BAAY,GAAG,gBAAgB,CAAC;;AClBzC;;;;;;GAMG;;ACNH;;;;;;GAMG;;;;"}
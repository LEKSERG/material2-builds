{"version":3,"file":"select__testing.js","sources":["../../../../../../src/material/select/testing/option-harness.ts","../../../../../../src/material/select/testing/select-harness.ts","../../../../../../src/material/select/testing/public-api.ts","../../../../../../src/material/select/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate, BaseHarnessFilters} from '@angular/cdk/testing';\n\n// TODO(crisbeto): combine these with the ones in `mat-autocomplete`\n// and expand to cover all states once we have experimental/core.\n\nexport interface OptionHarnessFilters extends BaseHarnessFilters {\n  text?: string;\n}\n\nexport interface OptionGroupHarnessFilters extends BaseHarnessFilters {\n  labelText?: string;\n}\n\n/** Harness for interacting with a the `mat-option` for a `mat-select` in tests. */\nexport class MatSelectOptionHarness extends ComponentHarness {\n  // TODO(crisbeto): things to add here when adding a common option harness:\n  // - isDisabled\n  // - isSelected\n  // - isActive\n  // - isMultiple\n\n  static with(options: OptionHarnessFilters = {}) {\n    return new HarnessPredicate(MatSelectOptionHarness, options)\n        .addOption('text', options.text,\n            async (harness, title) =>\n                HarnessPredicate.stringMatches(await harness.getText(), title));\n  }\n\n  static hostSelector = '.mat-select-panel .mat-option';\n\n  /** Clicks the option. */\n  async click(): Promise<void> {\n    return (await this.host()).click();\n  }\n\n  /** Gets a promise for the option's label text. */\n  async getText(): Promise<string> {\n    return (await this.host()).text();\n  }\n}\n\n/** Harness for interacting with a the `mat-optgroup` for a `mat-select` in tests. */\nexport class MatSelectOptionGroupHarness extends ComponentHarness {\n  private _label = this.locatorFor('.mat-optgroup-label');\n  static hostSelector = '.mat-select-panel .mat-optgroup';\n\n  static with(options: OptionGroupHarnessFilters = {}) {\n    return new HarnessPredicate(MatSelectOptionGroupHarness, options)\n        .addOption('labelText', options.labelText,\n            async (harness, title) =>\n                HarnessPredicate.stringMatches(await harness.getLabelText(), title));\n  }\n\n  /** Gets a promise for the option group's label text. */\n  async getLabelText(): Promise<string> {\n    return (await this._label()).text();\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {MatFormFieldControlHarness} from '@angular/material/form-field/testing/control';\nimport {SelectHarnessFilters} from './select-harness-filters';\nimport {\n  MatSelectOptionHarness,\n  MatSelectOptionGroupHarness,\n  OptionHarnessFilters,\n  OptionGroupHarnessFilters,\n} from './option-harness';\n\n/** Harness for interacting with a standard mat-select in tests. */\nexport class MatSelectHarness extends MatFormFieldControlHarness {\n  private _documentRootLocator = this.documentRootLocatorFactory();\n  private _backdrop = this._documentRootLocator.locatorFor('.cdk-overlay-backdrop');\n  private _optionalPanel = this._documentRootLocator.locatorForOptional('.mat-select-panel');\n  private _trigger = this.locatorFor('.mat-select-trigger');\n  private _value = this.locatorFor('.mat-select-value');\n\n  static hostSelector = '.mat-select';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatSelectHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which select instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: SelectHarnessFilters = {}): HarnessPredicate<MatSelectHarness> {\n    return new HarnessPredicate(MatSelectHarness, options);\n  }\n\n  /** Gets a boolean promise indicating if the select is disabled. */\n  async isDisabled(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-select-disabled');\n  }\n\n  /** Gets a boolean promise indicating if the select is valid. */\n  async isValid(): Promise<boolean> {\n    return !(await (await this.host()).hasClass('ng-invalid'));\n  }\n\n  /** Gets a boolean promise indicating if the select is required. */\n  async isRequired(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-select-required');\n  }\n\n  /** Gets a boolean promise indicating if the select is empty (no value is selected). */\n  async isEmpty(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-select-empty');\n  }\n\n  /** Gets a boolean promise indicating if the select is in multi-selection mode. */\n  async isMultiple(): Promise<boolean> {\n    const ariaMultiselectable = (await this.host()).getAttribute('aria-multiselectable');\n    return (await ariaMultiselectable) === 'true';\n  }\n\n  /** Gets a promise for the select's value text. */\n  async getValueText(): Promise<string> {\n    return (await this._value()).text();\n  }\n\n  /** Focuses the select and returns a void promise that indicates when the action is complete. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the select and returns a void promise that indicates when the action is complete. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Gets the options inside the select panel. */\n  async getOptions(filter: OptionHarnessFilters = {}): Promise<MatSelectOptionHarness[]> {\n    return this._documentRootLocator.locatorForAll(MatSelectOptionHarness.with(filter))();\n  }\n\n  /** Gets the groups of options inside the panel. */\n  async getOptionGroups(filter: OptionGroupHarnessFilters = {}):\n      Promise<MatSelectOptionGroupHarness[]> {\n    return this._documentRootLocator.locatorForAll(MatSelectOptionGroupHarness.with(filter))();\n  }\n\n  /** Gets whether the select is open. */\n  async isOpen(): Promise<boolean> {\n    return !!(await this._optionalPanel());\n  }\n\n  /** Opens the select's panel. */\n  async open(): Promise<void> {\n    if (!await this.isOpen()) {\n      return (await this._trigger()).click();\n    }\n  }\n\n  /**\n   * Clicks the options that match the passed-in filter. If the select is in multi-selection\n   * mode all options will be clicked, otherwise the harness will pick the first matching option.\n   */\n  async clickOptions(filter: OptionHarnessFilters = {}): Promise<void> {\n    await this.open();\n\n    const [isMultiple, options] = await Promise.all([this.isMultiple(), this.getOptions(filter)]);\n\n    if (options.length === 0) {\n      throw Error('Select does not have options matching the specified filter');\n    }\n\n    if (isMultiple) {\n      await Promise.all(options.map(option => option.click()));\n    } else {\n      await options[0].click();\n    }\n  }\n\n  /** Closes the select's panel. */\n  async close(): Promise<void> {\n    if (await this.isOpen()) {\n      // This is the most consistent way that works both in both single and multi-select modes,\n      // but it assumes that only one overlay is open at a time. We should be able to make it\n      // a bit more precise after #16645 where we can dispatch an ESCAPE press to the host instead.\n      return (await this._backdrop()).click();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './select-harness';\nexport * from './select-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}
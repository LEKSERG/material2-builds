{"version":3,"file":"autocomplete__testing.js","sources":["../../../../../../../src/material/autocomplete/testing/option-harness.ts","../../../../../../../src/material/autocomplete/testing/autocomplete-harness.ts","../../../../../../../src/material/autocomplete/testing/public-api.ts","../../../../../../../src/material/autocomplete/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate, BaseHarnessFilters} from '@angular/cdk/testing';\n\n// TODO(crisbeto): combine these with the ones in `mat-select`\n// and expand to cover all states once we have experimental/core.\n\nexport interface OptionHarnessFilters extends BaseHarnessFilters {\n  text?: string | RegExp;\n}\n\nexport interface OptionGroupHarnessFilters extends BaseHarnessFilters {\n  labelText?: string | RegExp;\n}\n\n/**\n * Harness for interacting with a the `mat-option` for a `mat-autocomplete` in tests.\n * @dynamic\n */\nexport class MatAutocompleteOptionHarness extends ComponentHarness {\n  static hostSelector = '.mat-autocomplete-panel .mat-option';\n\n  static with(options: OptionHarnessFilters = {}) {\n    return new HarnessPredicate(MatAutocompleteOptionHarness, options)\n        .addOption('text', options.text,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getText(), text));\n  }\n\n  /** Clicks the option. */\n  async select(): Promise<void> {\n    return (await this.host()).click();\n  }\n\n  /** Gets a promise for the option's label text. */\n  async getText(): Promise<string> {\n    return (await this.host()).text();\n  }\n}\n\n/**\n * Harness for interacting with a the `mat-optgroup` for a `mat-autocomplete` in tests.\n * @dynamic\n */\nexport class MatAutocompleteOptionGroupHarness extends ComponentHarness {\n  private _label = this.locatorFor('.mat-optgroup-label');\n  static hostSelector = '.mat-autocomplete-panel .mat-optgroup';\n\n  static with(options: OptionGroupHarnessFilters = {}) {\n    return new HarnessPredicate(MatAutocompleteOptionGroupHarness, options)\n        .addOption('labelText', options.labelText,\n            (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label));\n  }\n\n  /** Gets a promise for the option group's label text. */\n  async getLabelText(): Promise<string> {\n    return (await this._label()).text();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {AutocompleteHarnessFilters} from './autocomplete-harness-filters';\nimport {\n  MatAutocompleteOptionGroupHarness,\n  MatAutocompleteOptionHarness,\n  OptionGroupHarnessFilters,\n  OptionHarnessFilters\n} from './option-harness';\n\n/** Selector for the autocomplete panel. */\nconst PANEL_SELECTOR = '.mat-autocomplete-panel';\n\n/**\n * Harness for interacting with a standard mat-autocomplete in tests.\n * @dynamic\n */\nexport class MatAutocompleteHarness extends ComponentHarness {\n  private _documentRootLocator = this.documentRootLocatorFactory();\n  private _optionalPanel = this._documentRootLocator.locatorForOptional(PANEL_SELECTOR);\n\n  static hostSelector = '.mat-autocomplete-trigger';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for an autocomplete with\n   * specific attributes.\n   * @param options Options for narrowing the search:\n   *   - `name` finds an autocomplete with a specific name.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: AutocompleteHarnessFilters = {}): HarnessPredicate<MatAutocompleteHarness> {\n    return new HarnessPredicate(MatAutocompleteHarness, options)\n        .addOption('value', options.value,\n            (harness, value) => HarnessPredicate.stringMatches(harness.getValue(), value));\n  }\n\n  /** Gets the value of the autocomplete input. */\n  async getValue(): Promise<string> {\n    return (await this.host()).getProperty('value');\n  }\n\n  /** Gets a boolean promise indicating if the autocomplete input is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  /** Focuses the input and returns a void promise that indicates when the action is complete. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the input and returns a void promise that indicates when the action is complete. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Enters text into the autocomplete. */\n  async enterText(value: string): Promise<void> {\n    return (await this.host()).sendKeys(value);\n  }\n\n  /** Gets the options inside the autocomplete panel. */\n  async getOptions(filters: OptionHarnessFilters = {}): Promise<MatAutocompleteOptionHarness[]> {\n    return this._documentRootLocator.locatorForAll(MatAutocompleteOptionHarness.with(filters))();\n  }\n\n  /** Gets the groups of options inside the panel. */\n  async getOptionGroups(filters: OptionGroupHarnessFilters = {}):\n      Promise<MatAutocompleteOptionGroupHarness[]> {\n    return this._documentRootLocator.locatorForAll(\n        MatAutocompleteOptionGroupHarness.with(filters))();\n  }\n\n  /** Selects the first option matching the given filters. */\n  async selectOption(filters: OptionHarnessFilters): Promise<void> {\n    await this.focus(); // Focus the input to make sure the autocomplete panel is shown.\n    const options = await this.getOptions(filters);\n    if (!options.length) {\n      throw Error(`Could not find a mat-option matching ${JSON.stringify(filters)}`);\n    }\n    await options[0].select();\n  }\n\n  /** Gets whether the autocomplete is open. */\n  async isOpen(): Promise<boolean> {\n    const panel = await this._optionalPanel();\n    return !!panel && await panel.hasClass('mat-autocomplete-visible');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './autocomplete-harness';\nexport * from './autocomplete-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":["tslib_1.__extends"],"mappings":"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"}
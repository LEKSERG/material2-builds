{"version":3,"file":"material-sidenav-testing.umd.js","sources":["../../../../../../../src/material/sidenav/testing/drawer-harness.ts","../../../../../../../src/material/sidenav/testing/sidenav-harness.ts","../../../../../../../src/material/sidenav/testing/public-api.ts","../../../../../../../src/material/sidenav/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {DrawerHarnessFilters} from './drawer-harness-filters';\n\n/**\n * Harness for interacting with a standard mat-drawer in tests.\n * @dynamic\n */\nexport class MatDrawerHarness extends ComponentHarness {\n  static hostSelector = '.mat-drawer';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a drawer with\n   * specific attributes.\n   * @param options Options for narrowing the search.\n   * @return `HarnessPredicate` configured with the given options.\n   */\n  static with(options: DrawerHarnessFilters = {}): HarnessPredicate<MatDrawerHarness> {\n    return new HarnessPredicate(MatDrawerHarness, options)\n        .addOption('position', options.position,\n            async (harness, position) => (await harness.getPosition()) === position);\n  }\n\n  /** Gets whether the drawer is open. */\n  async isOpen(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-drawer-opened');\n  }\n\n  /** Gets the position of the drawer inside its container. */\n  async getPosition(): Promise<'start'|'end'> {\n    const host = await this.host();\n    return (await host.hasClass('mat-drawer-end')) ? 'end' : 'start';\n  }\n\n  /** Gets the mode that the drawer is in. */\n  async getMode(): Promise<'over'|'push'|'side'> {\n    const host = await this.host();\n\n    if (await host.hasClass('mat-drawer-push')) {\n      return 'push';\n    }\n\n    if (await host.hasClass('mat-drawer-side')) {\n      return 'side';\n    }\n\n    return 'over';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {MatDrawerHarness} from './drawer-harness';\nimport {DrawerHarnessFilters} from './drawer-harness-filters';\n\n/**\n * Harness for interacting with a standard mat-sidenav in tests.\n * @dynamic\n */\nexport class MatSidenavHarness extends MatDrawerHarness {\n  static hostSelector = '.mat-sidenav';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a sidenav with\n   * specific attributes.\n   * @param options Options for narrowing the search.\n   * @return `HarnessPredicate` configured with the given options.\n   */\n  static with(options: DrawerHarnessFilters = {}): HarnessPredicate<MatDrawerHarness> {\n    return new HarnessPredicate(MatDrawerHarness, options)\n        .addOption('position', options.position,\n            async (harness, position) => (await harness.getPosition()) === position);\n  }\n\n  /** Gets whether the sidenav is fixed in the viewport. */\n  async isFixedInViewport(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-sidenav-fixed');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './drawer-harness';\nexport * from './drawer-harness-filters';\nexport * from './sidenav-harness';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":["tslib_1.__extends","HarnessPredicate","ComponentHarness"],"mappings":";;;;;;IAAA;;;;;;;IAWA;;;;AAIA;QAAsCA,4CAAgB;QAAtD;;SAwCC;;;;;;;QA/BQ,qBAAI,GAAX,UAAY,OAAkC;YAA9C,iBAIC;YAJW,wBAAA,EAAA,YAAkC;YAC5C,OAAO,IAAIC,wBAAgB,CAAC,gBAAgB,EAAE,OAAO,CAAC;iBACjD,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,QAAQ,EACnC,UAAO,OAAO,EAAE,QAAQ;;4BAAM,qBAAM,OAAO,CAAC,WAAW,EAAE,EAAA;4BAA5B,sBAAA,CAAC,SAA2B,MAAM,QAAQ,EAAA;;qBAAA,CAAC,CAAC;SAClF;;QAGK,iCAAM,GAAZ;;;;gCACU,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;gCAAzB,sBAAO,CAAC,SAAiB,EAAE,QAAQ,CAAC,mBAAmB,CAAC,EAAC;;;;SAC1D;;QAGK,sCAAW,GAAjB;;;;;gCACe,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;4BAAxB,IAAI,GAAG,SAAiB;4BACtB,qBAAM,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAA;gCAA7C,sBAAO,CAAC,SAAqC,IAAI,KAAK,GAAG,OAAO,EAAC;;;;SAClE;;QAGK,kCAAO,GAAb;;;;;gCACe,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;4BAAxB,IAAI,GAAG,SAAiB;4BAE1B,qBAAM,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAA;;4BAA1C,IAAI,SAAsC,EAAE;gCAC1C,sBAAO,MAAM,EAAC;6BACf;4BAEG,qBAAM,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAA;;4BAA1C,IAAI,SAAsC,EAAE;gCAC1C,sBAAO,MAAM,EAAC;6BACf;4BAED,sBAAO,MAAM,EAAC;;;;SACf;QAtCM,6BAAY,GAAG,aAAa,CAAC;QAuCtC,uBAAC;KAAA,CAxCqCC,wBAAgB;;ICftD;;;;;;;IAYA;;;;AAIA;QAAuCF,6CAAgB;QAAvD;;SAmBC;;;;;;;QAVQ,sBAAI,GAAX,UAAY,OAAkC;YAA9C,iBAIC;YAJW,wBAAA,EAAA,YAAkC;YAC5C,OAAO,IAAIC,wBAAgB,CAAC,gBAAgB,EAAE,OAAO,CAAC;iBACjD,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,QAAQ,EACnC,UAAO,OAAO,EAAE,QAAQ;;4BAAM,qBAAM,OAAO,CAAC,WAAW,EAAE,EAAA;4BAA5B,sBAAA,CAAC,SAA2B,MAAM,QAAQ,EAAA;;qBAAA,CAAC,CAAC;SAClF;;QAGK,6CAAiB,GAAvB;;;;gCACU,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;gCAAzB,sBAAO,CAAC,SAAiB,EAAE,QAAQ,CAAC,mBAAmB,CAAC,EAAC;;;;SAC1D;QAjBM,8BAAY,GAAG,cAAc,CAAC;QAkBvC,wBAAC;KAAA,CAnBsC,gBAAgB;;IChBvD;;;;;;OAMG;;ICNH;;;;;;OAMG;;;;;;;;;;;;;"}
{"version":3,"file":"material.umd.min.js","sources":["../../src/material/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/material/tabs/tabs-module.ts","../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar-module.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/outlet.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/tree-module.ts","../../src/material/tree/data-source/flat-data-source.ts","../../src/material/tree/data-source/nested-data-source.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/core/month-constants.ts","../../src/material/datepicker/multi-year-view.ts","../../src/material/expansion/expansion-animations.ts","../../src/material/select/select.ts","../../src/material/tooltip/tooltip.ts","../../src/material/table/table-data-source.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab-label.ts","../../src/material/tabs/tab.ts","../../src/material/tabs/tabs-animations.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/paginated-tab-header.ts","../../src/material/tabs/tab-header.ts","../../src/material/tabs/tab-group.ts","../../src/material/sort/sort-header.ts","../../src/material/sort/sort-module.ts","../../src/material/stepper/step-label.ts","../../src/material/stepper/stepper-intl.ts","../../src/material/stepper/step-header.ts","../../src/material/stepper/stepper-animations.ts","../../src/material/stepper/stepper-icon.ts","../../src/material/stepper/stepper.ts","../../src/material/stepper/stepper-button.ts","../../src/material/stepper/stepper-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/text-column.ts","../../src/material/table/table-module.ts","../../src/material/slider/slider.ts","../../src/material/slider/slider-module.ts","../../src/material/snack-bar/snack-bar-ref.ts","../../src/material/snack-bar/snack-bar-config.ts","../../src/material/snack-bar/simple-snack-bar.ts","../../src/material/snack-bar/snack-bar-animations.ts","../../src/material/snack-bar/snack-bar-container.ts","../../src/material/snack-bar/snack-bar-module.ts","../../src/material/snack-bar/snack-bar.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-animations.ts","../../src/material/sort/sort-header-intl.ts","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts","../../src/material/slide-toggle/slide-toggle-config.ts","../../src/material/slide-toggle/slide-toggle.ts","../../src/material/slide-toggle/slide-toggle-required-validator.ts","../../src/material/slide-toggle/slide-toggle-module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner-module.ts","../../src/material/radio/radio.ts","../../src/material/radio/radio-module.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/select/select-module.ts","../../src/material/tooltip/tooltip-animations.ts","../../src/material/tooltip/tooltip-module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.ts","../../src/material/paginator/paginator-module.ts","../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar-module.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-module.ts","../../src/material/select/select-animations.ts","../../src/material/list/selection-list.ts","../../src/material/list/list-module.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/list/list.ts","../../src/material/expansion/expansion-panel-header.ts","../../src/material/expansion/accordion.ts","../../src/material/expansion/expansion-module.ts","../../src/material/grid-list/grid-list-base.ts","../../src/material/grid-list/grid-tile.ts","../../src/material/grid-list/tile-coordinator.ts","../../src/material/grid-list/tile-styler.ts","../../src/material/grid-list/grid-list.ts","../../src/material/grid-list/grid-list-module.ts","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts","../../src/material/datepicker/calendar.ts","../../src/material/datepicker/datepicker-animations.ts","../../src/material/datepicker/datepicker.ts","../../src/material/datepicker/datepicker-input.ts","../../src/material/datepicker/datepicker-toggle.ts","../../src/material/datepicker/datepicker-module.ts","../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/input/input.ts","../../src/material/input/input-module.ts","../../src/material/datepicker/datepicker-intl.ts","../../src/material/datepicker/calendar-body.ts","../../src/material/datepicker/month-view.ts","../../src/material/datepicker/year-view.ts","../../src/material/chips/chip-list.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/chips-module.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-animations.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","../../src/material/dialog/dialog-module.ts","../../src/material/input/autosize.ts","../../src/material/input/input-value-accessor.ts","../../src/material/card/card.ts","../../src/material/card/card-module.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox-required-validator.ts","../../src/material/checkbox/checkbox-module.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-default-options.ts","../../src/material/button/button.ts","../../src/material/button/button-module.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle-module.ts","../../src/material/form-field/form-field.ts","../../src/material/form-field/form-field-module.ts","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts","../../src/material/badge/badge.ts","../../src/material/badge/badge-module.ts","../../src/material/bottom-sheet/bottom-sheet-config.ts","../../src/material/bottom-sheet/bottom-sheet-animations.ts","../../src/material/bottom-sheet/bottom-sheet-container.ts","../../src/material/bottom-sheet/bottom-sheet-module.ts","../../src/material/bottom-sheet/bottom-sheet-ref.ts","../../src/material/bottom-sheet/bottom-sheet.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/core/label/label-options.ts","../../src/material/form-field/error.ts","../../src/material/form-field/form-field-animations.ts","../../src/material/form-field/form-field-control.ts","../../src/material/form-field/hint.ts","../../src/material/form-field/label.ts","../../src/material/form-field/placeholder.ts","../../src/material/form-field/prefix.ts","../../src/material/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/material/core/common-behaviors/common-module.ts","../../src/material/core/common-behaviors/disabled.ts","../../src/material/core/common-behaviors/color.ts","../../src/material/core/common-behaviors/disable-ripple.ts","../../src/material/core/common-behaviors/tabindex.ts","../../src/material/core/common-behaviors/error-state.ts","../../src/material/core/common-behaviors/initialized.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/line/line.ts","../../src/material/core/ripple/ripple-renderer.ts","../../src/material/form-field/form-field-errors.ts","../../src/material/input/input-errors.ts","../../src/material/datepicker/datepicker-errors.ts","../../src/material/menu/menu-errors.ts","../../src/material/select/select-errors.ts","../../src/material/sort/sort-errors.ts","../../src/material/core/version.ts","../../src/material/core/animation/animation.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/core/error/error-options.ts","../../src/material/core/gestures/gesture-config.ts","../../src/material/core/ripple/ripple-ref.ts","../../src/material/core/ripple/ripple.ts","../../src/material/core/ripple/index.ts","../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/material/core/selection/index.ts","../../src/material/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusMonitor, FocusableOption} from '@angular/cdk/a11y';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MatInkBar} from '../ink-bar';\nimport {MatPaginatedTabHeader} from '../paginated-tab-header';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {\n    'class': 'mat-tab-nav-bar mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n    '[class.mat-primary]': 'color !== \"warn\" && color !== \"accent\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends MatPaginatedTabHeader implements AfterContentChecked,\n  AfterContentInit, OnDestroy {\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true}) _items: QueryList<MatTabLink>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const classList = this._elementRef.nativeElement.classList;\n    classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n  private _disableRipple: boolean = false;\n\n  /** Theme color of the nav bar. */\n  @Input() color: ThemePalette = 'primary';\n\n  constructor(elementRef: ElementRef,\n              @Optional() dir: Directionality,\n              ngZone: NgZone,\n              changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              /**\n               * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\n               */\n              @Optional() platform?: Platform,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected() {\n    // noop\n  }\n\n  ngAfterContentInit() {\n    // We need this to run before the `changes` subscription in parent to ensure that the\n    // selectedIndex is up-to-date by the time the super class starts looking for it.\n    this._items.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this.updateActiveLink();\n    });\n\n    super.ngAfterContentInit();\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(_element?: ElementRef) {\n    if (!this._items) {\n      return;\n    }\n\n    const items = this._items.toArray();\n\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].active) {\n        this.selectedIndex = i;\n        this._changeDetectorRef.markForCheck();\n        return;\n      }\n    }\n\n    // The ink bar should hide itself if no items are active.\n    this.selectedIndex = -1;\n    this._inkBar.hide();\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkBase {}\nconst _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active ? \"page\" : null',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase implements OnDestroy, CanDisable,\n  CanDisableRipple, HasTabIndex, RippleTarget, FocusableOption {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this.elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: MatTabNav, public elementRef: ElementRef, ngZone: NgZone,\n      platform: Platform,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(elementRef);\n    this.rippleConfig = globalRippleOptions || {};\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (animationMode === 'NoopAnimations') {\n      this.rippleConfig.animation = {enterDuration: 0, exitDuration: 0};\n    }\n\n    _focusMonitor.monitor(elementRef);\n  }\n\n  focus() {\n    this.elementRef.nativeElement.focus();\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n    this._focusMonitor.stopMonitoring(this.elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends CdkNestedTreeNode<T> implements AfterContentInit,\n  OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** Whether the node is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  /** Tabindex for the node. */\n  @Input()\n  get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  private _tabIndex: number;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]',\n  providers: [{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }]\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ConnectedPosition,\n} from '@angular/cdk/overlay';\nimport {_supportsShadowDom} from '@angular/cdk/platform';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {defer, fromEvent, merge, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {delay, filter, map, switchMap, take, tap} from 'rxjs/operators';\n\nimport {MatAutocomplete} from './autocomplete';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'class': 'mat-autocomplete-trigger',\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, AfterViewInit, OnChanges,\n  OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Whether the element is inside of a ShadowRoot component. */\n  private _isInsideShadowRoot: boolean;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n   * will render the panel underneath the trigger if there is enough space for it to fit in\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n   * whether it fits completely in the viewport.\n   */\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterViewInit() {\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n\n      if (_supportsShadowDom()) {\n        const element = this._element.nativeElement;\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n        // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n        // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n        this._isInsideShadowRoot = rootNode instanceof (window as any).ShadowRoot;\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef!.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n               fromEvent(this._document, 'click') as Observable<MouseEvent>,\n               fromEvent(this._document, 'touchend') as Observable<TouchEvent>)\n        .pipe(filter(event => {\n          // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n          // fall back to check the first element in the path of the click event.\n          const clickTarget =\n              (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                                                                event.target) as HTMLElement;\n          const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n\n          return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n        .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n              const wasOpen = this.panelOpen;\n              this._resetActiveItem();\n              this.autocomplete._setVisibility();\n\n              if (this.panelOpen) {\n                this._overlayRef!.updatePosition();\n\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                  this.autocomplete.opened.emit();\n                }\n              }\n\n              return this.panelClosingActions;\n            }),\n            // when the first closing event occurs...\n            take(1))\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n\n          // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false);\n\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const belowPosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    };\n    const abovePosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    };\n\n    let positions: ConnectedPosition[];\n\n    if (this.position === 'above') {\n      positions = [abovePosition];\n    } else if (this.position === 'below') {\n      positions = [belowPosition];\n    } else {\n      positions = [belowPosition, abovePosition];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (!isSameMultiYearView(\n      this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n\n    // We want a range years such that we maximize the number of\n    // enabled dates visible at once. This prevents issues where the minimum year\n    // is the last item of a page OR the maximum year is the first item of a page.\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view.\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(minYearOfPage + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          yearsPerPage - getActiveOffset(\n            this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n\nexport function isSameMultiYearView<D>(\n  dateAdapter: DateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean {\n  const year1 = dateAdapter.getYear(date1);\n  const year2 = dateAdapter.getYear(date2);\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) ===\n          Math.floor((year2 - startingYear) / yearsPerPage);\n}\n\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nexport function getActiveOffset<D>(\n  dateAdapter: DateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number {\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)),\n    yearsPerPage);\n}\n\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear<D>(\n  dateAdapter: DateAdapter<D>, minDate: D | null, maxDate: D | null): number {\n  let startingYear = 0;\n  if (maxDate) {\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo (a: number, b: number): number {\n  return (a % b + b) % b;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  @Input() typeaheadDebounceInterval: number;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead(this.typeaheadDebounceInterval)\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ngZone.runOutsideAngular(() => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(() => {\n          this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n        });\n      });\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE && !hasModifierKey(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone, Optional} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {}\nconst _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {}\nconst _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectorRef,\n  ElementRef,\n  NgZone,\n  Optional,\n  QueryList,\n  EventEmitter,\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  OnDestroy,\n} from '@angular/core';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {FocusKeyManager, FocusableOption} from '@angular/cdk/a11y';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n/** Item inside a paginated tab header. */\ntype MatPaginatedTabHeaderItem = FocusableOption & {elementRef: ElementRef};\n\n/**\n * Base class for a tab header that supported pagination.\n */\nexport abstract class MatPaginatedTabHeader implements AfterContentChecked, AfterContentInit,\n  AfterViewInit, OnDestroy {\n  abstract _items: QueryList<MatPaginatedTabHeaderItem>;\n  abstract _inkBar: MatInkBar;\n  abstract _tabListContainer: ElementRef<HTMLElement>;\n  abstract _tabList: ElementRef<HTMLElement>;\n  abstract _nextPaginator: ElementRef<HTMLElement>;\n  abstract _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  protected readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatPaginatedTabHeaderItem>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n\n    if (this._selectedIndex != value) {\n      this._selectedIndexChanged = true;\n      this._selectedIndex = value;\n\n      if (this._keyManager) {\n        this._keyManager.updateActiveItemIndex(value);\n      }\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              /**\n               * @deprecated @breaking-change 9.0.0 `_platform` and `_animationMode`\n               * parameters to become required.\n               */\n              private _platform?: Platform,\n              public _animationMode?: string) {\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  /** Called when the user has selected an item via the keyboard. */\n  protected abstract _itemSelected(event: KeyboardEvent): void;\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager<MatPaginatedTabHeaderItem>(this._items)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize, this._items.changes).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._items.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._items.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        this._itemSelected(event);\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent || '';\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._items) { return true; }\n\n    const tab = this._items ? this._items.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._items && this._items.length) {\n      this._items.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 9.0.0 Remove null check for `platform` after it can no longer be undefined.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    const {offsetLeft, offsetWidth} = selectedLabel.elementRef.nativeElement;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = offsetLeft;\n      labelAfterPos = labelBeforePos + offsetWidth;\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - offsetLeft;\n      labelBeforePos = labelAfterPos - offsetWidth;\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedItem = this._items && this._items.length ?\n        this._items.toArray()[this.selectedIndex] : null;\n    const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n\n    if (selectedLabelWrapper) {\n      this._inkBar.alignToElement(selectedLabelWrapper);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n  Input,\n  Inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {Platform} from '@angular/cdk/platform';\nimport {MatPaginatedTabHeader} from './paginated-tab-header';\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['selectedIndex'],\n  outputs: ['selectFocusedIndex', 'indexFocused'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends MatPaginatedTabHeader implements AfterContentChecked,\n  AfterContentInit, AfterViewInit, OnDestroy {\n\n  @ContentChildren(MatTabLabelWrapper) _items: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Optional() dir: Directionality,\n              ngZone: NgZone,\n              platform: Platform,\n              // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected(event: KeyboardEvent) {\n    event.preventDefault();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken<MatTabsConfig>('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the step header. */\n  focus() {\n    this._focusMonitor.focusVia(this._elementRef, 'program');\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    // On Safari starting to slide temporarily triggers text selection mode which\n    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n    '(selectstart)': '$event.preventDefault()',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if mouse coordinates need to be inverted.\n    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      // Value is never null but since setters and getters cannot have\n      // different types, the value getter is also typed to return null.\n      return this.displayWith(this.value!);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus(options?: FocusOptions) {\n    this._focusHostElement(options);\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement(options?: FocusOptions) {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(\n      takeUntil(overlayRef.detachments())\n    ).subscribe(state => {\n      const classList = overlayRef.overlayElement.classList;\n      const className = 'mat-snack-bar-handset';\n      state.matches ? classList.add(className) : classList.remove(className);\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._updateFocusTrapState();\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject<void>();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => {\n              return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n            event.preventDefault();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._updateFocusTrapState();\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    this._updateFocusTrapState();\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  /** Updates the enabled state of the focus trap. */\n  private _updateFocusTrapState() {\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this.updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        const width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        const width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    const classList = this._element.nativeElement.classList;\n    const className = 'mat-drawer-container-has-open';\n\n    if (isAdd) {\n      classList.add(className);\n    } else {\n      classList.remove(className);\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n@Directive({\n  selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n  providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n})\nexport class MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\nimport {MatSlideToggleRequiredValidator} from './slide-toggle-required-validator';\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n@NgModule({\n  exports: [MatSlideToggleRequiredValidator],\n  declarations: [MatSlideToggleRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatSlideToggleRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatRippleModule,\n    MatCommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatSlideToggle,\n    MatCommonModule\n  ],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements OnInit, CanColor {\n  private _diameter = BASE_SIZE;\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n    if (!this._fallbackAnimation && this._styleRoot) {\n      this._attachStyleNode();\n    }\n  }\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n  }\n\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n\n    // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n    // Angular seems to create the element outside the shadow root and then moves it inside, if the\n    // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n    this._styleRoot = _getShadowRoot(element, this._document) || this._document.head;\n    this._attachStyleNode();\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    element.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n      const styleTag: HTMLStyleElement = this._document.createElement('style');\n      styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n      styleTag.textContent = this._getAnimationText();\n      styleRoot.appendChild(styleTag);\n\n      if (!diametersForElement) {\n        diametersForElement = new Set<number>();\n        diameters.set(styleRoot, diametersForElement);\n      }\n\n      diametersForElement.add(currentDiameter);\n    }\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement, _document: Document): Node | null {\n  // TODO(crisbeto): see whether we should move this into the CDK\n  // feature detection utilities once #15616 gets merged in.\n  if (typeof window !== 'undefined') {\n    const head = _document.head;\n\n    // Check whether the browser supports Shadow DOM.\n    if (head && ((head as any).createShadowRoot || head.attachShadow)) {\n      const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n      // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n      if (rootNode instanceof (window as any).ShadowRoot) {\n        return rootNode;\n      }\n    }\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nexport interface MatRadioDefaultOptions {\n  color: ThemePalette;\n}\n\nexport const MAT_RADIO_DEFAULT_OPTIONS =\n  new InjectionToken<MatRadioDefaultOptions>('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions {\n  return {\n    color: 'accent'\n  };\n}\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[attr.aria-describedby]': 'null',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n      (this.radioGroup && this.radioGroup.color) ||\n      this._providerOverride && this._providerOverride.color || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n                @Optional() @Inject(MAT_RADIO_DEFAULT_OPTIONS)\n                private _providerOverride?: MatRadioDefaultOptions) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} – ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this._emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n    return undefined;\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this._emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private _emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n/** Base class with all of the `MatMenu` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** All items inside the menu. Includes items nested inside another menu. */\n  @ContentChildren(MatMenuItem, {descendants: true}) _allItems: QueryList<MatMenuItem>;\n\n  /** Only the direct descendant menu items. */\n  private _directDescendantItems = new QueryList<MatMenuItem>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n    this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._directDescendantItems.destroy();\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    const itemChanges = this._directDescendantItems.changes as Observable<QueryList<MatMenuItem>>;\n    return itemChanges.pipe(\n      startWith(this._directDescendantItems),\n      switchMap(items => merge(...items.map((item: MatMenuItem) => item._hovered)))\n    );\n  }\n\n  /*\n   * Registers a menu item with the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  addItem(_item: MatMenuItem) {}\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  removeItem(_item: MatMenuItem) {}\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    const manager = this._keyManager;\n\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => manager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      manager.setFocusOrigin(origin).setFirstItemActive();\n    }\n\n    // If there's no active item at this point, it means that all the items are disabled.\n    // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n    // give _some_ feedback to screen readers.\n    if (!manager.activeItem && this._directDescendantItems.length) {\n      let element = this._directDescendantItems.first._getHostElement().parentElement;\n\n      // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n      // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n      // because the panel is inside an `ng-template`. We work around it by starting from one of\n      // the items and walking up the DOM.\n      while (element) {\n        if (element.getAttribute('role') === 'menu') {\n          element.focus();\n          break;\n        } else {\n          element = element.parentElement;\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   */\n  private _updateDirectDescendants() {\n    this._allItems.changes\n      .pipe(startWith(this._allItems))\n      .subscribe((items: QueryList<MatMenuItem>) => {\n        this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n        this._directDescendantItems.notifyOnChanges();\n      });\n  }\n}\n\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n/** @docs-public MatMenu */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenu extends MatMenu {\n\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'class': 'mat-menu-trigger',\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe({\n            next: () => menu.lazyContent!.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._setIsMenuOpen(false)\n          });\n      } else {\n        this._setIsMenuOpen(false);\n      }\n    } else {\n      this._setIsMenuOpen(false);\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n\n    this._restoreFocus();\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /** Restores focus to the element that was focused before the menu was open. */\n  private _restoreFocus() {\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {_MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    const list = this.selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements CanDisableRipple,\n  AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.onChange.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus(options?: FocusOptions) {\n    this._element.nativeElement.focus(options);\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DomPortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ChangeDetectorRef,\n  ComponentFactoryResolver,\n  Directive,\n  Inject,\n  Injector,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any,\n    private _changeDetectorRef?: ChangeDetectorRef) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n\n    // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n    // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n    // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n    // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n    // @breaking-change 9.0.0 Make change detector ref required\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  addItem?: (item: T) => void;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() public _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\nimport {MatAccordionTogglePosition} from './accordion-base';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@.disabled]': '_animationsDisabled',\n    '(@expansionHeight.start)': '_animationStarted()',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  /** Whether Angular animations in the panel header should be disabled. */\n  _animationsDisabled = true;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  _animationStarted() {\n    // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n    // there to work around a bug in Angular (see #13088), however this introduces a different\n    // issue. The new transition will cause the header to animate in on init (see #16067), if the\n    // consumer has set a header height that is different from the default one. We work around it\n    // by disabling animations on the header and re-enabling them after the first animation has run.\n    // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n    // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n    // for https://github.com/angular/angular/issues/18847 to be resolved.\n    this._animationsDisabled = false;\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    this._focusMonitor.focusVia(this._element, origin, options);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  ErrorHandler,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n/** Options that can be used to configure how an icon or the icons in an icon set are presented. */\nexport interface IconOptions {\n  /** View box to set on the icon. */\n  viewBox?: string;\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl, options?: IconOptions);\n  constructor(svgElement: SVGElement, options?: IconOptions);\n  constructor(data: SafeResourceUrl | SVGElement, public options?: IconOptions) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any,\n    // @breaking-change 9.0.0 _errorHandler parameter to be made required\n    @Optional() private readonly _errorHandler?: ErrorHandler) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconInNamespace('', iconName, url, options);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl,\n                        options?: IconOptions): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml,\n                               options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral, options);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconSetInNamespace('', url, options);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal, options);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml,\n                                  options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n            // @breaking-change 9.0.0 _errorHandler parameter to be made required\n            if (this._errorHandler) {\n              this._errorHandler.handleError(new Error(errorMessage));\n            } else {\n              console.error(errorMessage);\n            }\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText, config.options)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string, options?: IconOptions): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg, options);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string,\n                                 options?: IconOptions): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement, options);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg, options);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    const svg = this._svgElementFromString('<svg></svg>');\n    const attributes = element.attributes;\n\n    // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n    for (let i = 0; i < attributes.length; i++) {\n      const {name, value} = attributes[i];\n\n      if (name !== 'id') {\n        svg.setAttribute(name, value);\n      }\n    }\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement, options?: IconOptions): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n    if (options && options.viewBox) {\n      svg.setAttribute('viewBox', options.viewBox);\n    }\n\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any,\n  errorHandler?: ErrorHandler) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), ErrorHandler],\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {\n  getActiveOffset,\n  isSameMultiYearView,\n  MatMultiYearView,\n  yearsPerPage\n} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view, and the last year is\n    // just yearsPerPage - 1 away.\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n    return `${minYearOfPage} \\u2013 ${maxYearOfPage}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.close();\n    });\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionTogglePosition} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._initWeekdays();\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Initializes the weekdays. */\n  private _initWeekdays() {\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n        return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(options?: FocusOptions): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput(options?: FocusOptions) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._inputElement.focus(options);\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, ComponentFactoryResolver} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Alternate `ComponentFactoryResolver` to use when resolving the associated component. */\n  componentFactoryResolver?: ComponentFactoryResolver;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    const element = this._elementRef.nativeElement;\n\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n\n    // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      const activeElement = this._document.activeElement;\n\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the dialog already, because it's possible that the consumer\n      // turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/** Possible states of the lifecycle of a dialog. */\nexport const enum MatDialogState {OPEN, CLOSING, CLOSED}\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  /** Current state of the dialog. */\n  private _state = MatDialogState.OPEN;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }))\n      .subscribe(event => {\n        event.preventDefault();\n        this.close();\n      });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._state = MatDialogState.CLOSED;\n      this._overlayRef.detachBackdrop();\n\n      // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n      this._closeFallbackTimeout = setTimeout(() => {\n        this._overlayRef.dispose();\n      }, event.totalTime + 100);\n    });\n\n    this._containerInstance._startExitAnimation();\n    this._state = MatDialogState.CLOSING;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Gets the current state of the dialog's lifecycle. */\n  getState(): MatDialogState {\n    return this._state;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal = new ComponentPortal(MatDialogContainer,\n        config.viewContainerRef, injector, config.componentFactoryResolver);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.type]': 'type',\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Default to \"button\" to prevents accidental form submits. */\n  @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-card',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  }\n})\nexport class MatCard {\n  // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {}\n}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple,\n    FocusableOption {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin: FocusOrigin = 'keyboard', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, origin, options);\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value !== undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              // @breaking-change 8.0.0 `animationMode` parameter to become required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              // @breaking-change 9.0.0 `_changeDetectorRef` parameter to become required.\n              private _changeDetectorRef?: ChangeDetectorRef) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef);\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n      this._markForCheck();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n      this._markForCheck();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n      this._markForCheck();\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    this._markForCheck();\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n\n  private _markForCheck() {\n    // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple, FocusableOption {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (this._getHostElement() as HTMLElement).classList.add(attr);\n      }\n    }\n\n    // Add a class that applies to all buttons. This makes it easier to target if somebody\n    // wants to target all Material buttons. We do it here rather than `host` to ensure that\n    // the class is applied to derived classes.\n    elementRef.nativeElement.classList.add('mat-button-base');\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatButton` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    this._getHostElement().focus(options);\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle,\n                    select: boolean,\n                    isUserInput = false,\n                    deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (this._selectionModel) {\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      }\n    } else {\n      deferEvents = true;\n    }\n\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve(() => this._updateModelValue(isUserInput));\n    } else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel && this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n\n  /** Syncs up the group's value with the model and emits the change event. */\n  private _updateModelValue(isUserInput: boolean) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.name]': 'null',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n\n  /** Focuses the button. */\n  focus(options?: FocusOptions): void {\n    this._buttonElement.nativeElement.focus(options);\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n  hideRequiredMarker?: boolean;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\n  @ViewChild('label', {static: false}) private _label: ElementRef;\n\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  get _labelChild() {\n    return this._labelChildNonStatic || this._labelChildStatic;\n  }\n\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n    this._hideRequiredMarker = (_defaults && _defaults.hideRequiredMarker != null) ?\n        _defaults.hideRequiredMarker : false;\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  isDevMode,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n\n      if (isDevMode()) {\n        const nativeElement = _elementRef.nativeElement;\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\nimport {InjectionToken, ViewContainerRef} from '@angular/core';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the bottom sheet. */\n  scrollStrategy?: ScrollStrategy;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    const element = this._elementRef.nativeElement;\n\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      const activeElement = this._document.activeElement;\n\n      // Otherwise ensure that focus is on the container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the bottom sheet already, because it's possible that the\n      // consumer turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          clearTimeout(this._closeFallbackTimeout);\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(event => {\n      if (!this.disableClose &&\n        (event.type !== 'keydown' || !hasModifierKey(event as KeyboardEvent))) {\n        event.preventDefault();\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(event => {\n        // The logic that disposes of the overlay depends on the exit animation completing, however\n        // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n        // timeout which will clean everything up if the animation hasn't fired within the specified\n        // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n        // vast majority of cases the timeout will have been cleared before it has fired.\n        this._closeFallbackTimeout = setTimeout(() => {\n          this._overlayRef.dispose();\n        }, event.totalTime + 100);\n\n        this._overlayRef.detachBackdrop();\n      });\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: config.scrollStrategy || this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FocusOptions, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements FocusableOption, AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus(options);\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode, Version} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {VERSION as CDK_VERSION} from '@angular/cdk';\n\n// Private version constant to circumvent test/build issues,\n// i.e. avoid core to depend on the @angular/material primary entry-point\n// Can be removed once the Material primary entry-point no longer\n// re-exports all secondary entry-points\nconst VERSION = new Version('8.1.4-a6bff55e3');\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._checkCdkVersionMatch();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether the material version matches the cdk version */\n  private _checkCdkVersionMatch(): void {\n    if (VERSION.full !== CDK_VERSION.full) {\n      console.warn(\n          'The Angular Material version (' + VERSION.full + ') does not match ' +\n          'the Angular CDK version (' + CDK_VERSION.full + ').\\n' +\n          'Please ensure the versions of these two packages exactly match.'\n      );\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from its utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementOrElementRef: HTMLElement | ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = coerceElement(elementOrElementRef);\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this._onMousedown)\n        .set('mouseup', this._onPointerUp)\n        .set('mouseleave', this._onPointerUp)\n\n        .set('touchstart', this._onTouchStart)\n        .set('touchend', this._onPointerUp)\n        .set('touchcancel', this._onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this._runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this._runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(elementOrElementRef: HTMLElement | ElementRef<HTMLElement>) {\n    const element = coerceElement(elementOrElementRef);\n\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private _runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.1.4-a6bff55e3');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase { }\nconst _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["value","this","_disableRipple","coerceBooleanProperty","MatTabNav","prototype","_itemSelected","ngAfterContentInit","_this","_items","changes","pipe","startWith","takeUntil","_destroyed","subscribe","updateActiveLink","_super","call","_element","items","toArray","i","length","active","selectedIndex","_changeDetectorRef","markForCheck","_inkBar","hide","type","Component","args","selector","exportAs","inputs","template","styles","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","Platform","decorators","Optional","String","Inject","ANIMATION_MODULE_TYPE","propDecorators","_tabListContainer","ViewChild","static","_tabList","_nextPaginator","_previousPaginator","backgroundColor","Input","disableRipple","color","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","MatTabLink","_tabNavBar","elementRef","ngZone","platform","globalRippleOptions","tabIndex","_focusMonitor","animationMode","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","animation","enterDuration","exitDuration","monitor","get","_isActive","enumerable","configurable","disabled","stopMonitoring","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","FocusMonitor","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatToolbarBase","_elementRef","_MatToolbarMixinBase","mixinColor","MatToolbarRow","MatToolbar","_platform","document","_document","tslib_1.__extends","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","Array","from","nativeElement","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","_MatTreeNodeMixinBase","CdkTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","_disabled","Object","defineProperty","_tabIndex","ngOnDestroy","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","IterableDiffers","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTreeNodeOutlet","viewContainer","_node","CdkTreeNodeOutlet","ViewContainerRef","MatTree","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","CdkTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","MatTableDataSource","_filter","_sort","sort","_updateChangeSubscription","_paginator","paginator","sortChange","initialized","observableOf","pageChange","page","_internalPageChanges","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","_renderChangesSubscription","unsubscribe","_renderData","obj","filterPredicate","_updatePaginator","sortData","startIndex","pageIndex","pageSize","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_ngZone","_inkBarPositioner","_animationMode","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","positions","inkBar","left","width","[class._mat-animation-noopable]","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","distinctUntilChanged","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatPaginatedTabHeader","_viewportRuler","_scrollDistance","_selectedIndexChanged","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","fromEvent","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","_handlePaginatorPress","dirChange","resize","realign","updatePagination","_alignInkBarToSelectedTab","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","newFocusIndex","_setTabFocus","ngAfterContentChecked","_tabLabelCount","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","_onContentChanges","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","containerEl","scrollLeft","scrollWidth","scrollDistance","translateX","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedItem","selectedLabelWrapper","timer","maxScrollDistance","distance","max","Directionality","viewportRuler","outputs","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","MatTabGroupBase","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","_animationDuration","test","_backgroundColor","remove","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_setAnimationTransitionState","_arrowDirection","MatSortHeader","viewState","_viewState","_disableViewStateAnimation","_isDisabled","_isSorted","_showIndicatorHint","id","_getArrowDirectionState","_getArrowViewState","_updateArrowDirection","start","_getAriaSortAttribute","_renderArrow","(click)","(mouseenter)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","disableClear","MatSortModule","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","CdkStepper","ContentChildren","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","a","b","valueA","valueB","comparatorResult","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","backgroundSize","axis","sign","tickSize","rotate","_isMinValue","_thumbGap","vertical","_invertAxis","MatSlider","_getDirection","percent","_shouldInvertMouseCoords","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_isSliding","_focusHostElement","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","_clamp","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_tickIntervalPercent","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","options","_blurHostElement","blur","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","thumbLabel","displayWith","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","HandsetPortrait","detachments","overlayElement","matches","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","_columnDef","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_setIndicatorHintVisible","visible","openedVia","_opened","isOpen","_enableAnimations","_openedVia","_restoreFocus","_updateFocusTrapState","MatDrawer","_focusTrap","enabled","_isFocusTrapEnabled","matDrawerAnimations","transformDrawer","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-drawer-opened]","mode","HostBinding","openedChange","_openedStream","openedStart","_closedStream","closedStart","onPositionChanged","opened","_animationStartListener","HostListener","_animationDoneListener","backdropClick","_doCheckSubject","_validateDrawers","updateContentMargins","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","drawer","_drawers","_isDrawerOpen","_start","_end","debounceTime","_contentMarginChanges","close","_left","_width","_right","_contentMargins","ngDoCheck","_setContainerClass","className","throwMatDuplicatedDrawerError","_onBackdropClicked","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_onChange","_","_onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_onInputClick","toggle","_getDragPercentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","NG_VALIDATORS","MatSlideToggleRequiredValidator","CheckboxRequiredValidator","_MatSlideToggleRequiredValidatorModule","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","scale","MatProgressSpinner","_diameter","BASE_SIZE","_fallbackAnimation","trackedDiameters","_diameters","head","Set","_noopAnimations","_forceAnimations","diameter","strokeWidth","_styleRoot","_attachStyleNode","_strokeWidth","newValue","_getShadowRoot","animationClass","viewBox","_circleRadius","PI","_strokeCircumference","styleRoot","currentDiameter","diameters","diametersForElement","styleTag","createElement","setAttribute","_getAnimationText","appendChild","INDETERMINATE_ANIMATION_TEMPLATE","replace","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_DEFAULT_OPTIONS","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_providerOverride","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_color","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-describedby]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_trapFocus","_animationEnd","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","destroy","_animationStarted","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanelWrap","transformPanel","MatFormFieldControl","MatSelect","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","overlayDir","CdkConnectedOverlay","MatOption","optionGroups","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","multiple","disableOptionCentering","compareWith","errorStateMatcher","typeaheadDebounceInterval","sortComparator","selectionChange","MatSelectModule","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(longpress)","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","Handset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","_emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","_MatMenu","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_setIsMenuOpen","parentMenu","_setMenuElevation","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MatMenuItem","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuContent","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","switchMap","option","onSelectionChange","onStable","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","panelOpen","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","withTypeAhead","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","find","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","MatListOption","_handleBlur","selectionList","_hasFocus","_setSelected","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_setOptionsFromValues","_i","item","disableRippleChanges","colorChanges","firstChange","_isDestroyed","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_MatMenuBase","_xPosition","_yPosition","_directDescendantItems","QueryList","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","_updateDirectDescendants","_item","setFocusOrigin","parentElement","getAttribute","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","_allItems","reset","notifyOnChanges","defaultOptions","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_containsFocus","accordion","_handleHeaderFocus","expandedHeight","collapsedHeight","MatExpansionPanelHeader","_animationsDisabled","_toggle","_isExpanded","expanded","_getExpandedState","_getPanelId","_getTogglePosition","togglePosition","_showToggle","hideToggle","_keydown","_handleHeaderKeydown","_parentChangeSubscription","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","[attr.aria-controls]","[class.mat-expanded]","[class.mat-expansion-toggle-indicator-after]","[class.mat-expansion-toggle-indicator-before]","[@.disabled]","(@expansionHeight.start)","[@expansionHeight]","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_hideToggle","displayMode","_headers","header","MAT_ACCORDION","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_errorHandler","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","handleError","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","attributes","name_1","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ErrorHandler","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","match","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatCalendar","MatDatepickerIntl","headerComponent","startAt","minDate","maxDate","dateFilter","dateClass","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","_setColor","_createPopup","datepicker","getConnectedOverlayOrigin","componentInstance","MatDialog","DateAdapter","calendarHeaderComponent","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","params","bodyExpansion","uniqueId","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_togglePosition","_hasSpacing","_lazyContent","_body","focusedElement","bodyElement","useValue","[class.mat-expansion-panel-spacing]","accordionHideToggleChange","[required]","[attr.readonly]","MatInput","AutofillMonitor","readonly","_MatInputMixinBase","MatInputModule","MatTextareaAutosize","TextFieldModule","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","MatCalendarCell","displayValue","cssClasses","numCols","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","columnChanges","rows","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","_focusActiveCell","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_initWeekdays","_createWeekCells","_matCalendarBody","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","daysInMonth","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","yearsPerPage","isSameMultiYearView","_selectedYear","_todayYear","activeYear","minYearOfPage","getActiveOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","multi-year","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","MatChipList","_clearSelection","chips","chip","correspondingChip","selectViaInteraction","skip","MatChipListChange","_blur","_hasFocusedChip","_chipInput","focused","_markAsTouched","_allowFocusEscape","_userTabIndex","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","_lastDestroyedChipIndex","_originatesFromChip","currentElement","_syncChipsState","_chipListMultiple","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","TAB","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_closeFallbackTimeout","_result","dialogResult","detachBackdrop","totalTime","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","getState","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","splice","overlayContainer","getContainerElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","[attr.type]","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","minRows","maxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","tagName","_removeTriggerEvents","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","parentChip","MatChipListBase","_MatChipListMixinBase","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","newChipIndex","MatButtonBase","_MatButtonMixinBase","MatButton","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","BUTTON_HOST_ATTRIBUTES","DEFAULT_ROUND_BUTTON_COLOR","_origin","attribute","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","deferEvents","_updateModelValue","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","[attr.name]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_supportsShadowDom","rootNode","getRootNode","_isInsideShadowRoot","ShadowRoot","_positionStrategy","_setStrategyPositions","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","composedPath","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","withPush","belowPosition","abovePosition","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","getBadgeElement","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","_parent","_active","_mostRecentViewValue","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","year1","dateAdapter","year2","startingYear","getStartingYear","exp","parentRegistry","httpClient","sanitizer","errorHandler","pathname","search","scrollThrottle","parentIntl","createShadowRoot","attachShadow","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_checkCdkVersionMatch","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","full","CDK_VERSION","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","ignoreMouseEventsTimeout","passiveEventOptions","_target","elementOrElementRef","_isPointerDown","_triggerEvents","_activeRipples","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","_onTouchStart","touches","changedTouches","_onPointerUp","terminateOnPointerUp","persistent","_containerElement","coerceElement","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}
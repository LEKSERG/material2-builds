{"version":3,"file":"material.umd.min.js","sources":["../../src/material/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/material/tabs/tabs-module.ts","../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar-module.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/outlet.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/tree-module.ts","../../src/material/tree/data-source/flat-data-source.ts","../../src/material/tree/data-source/nested-data-source.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/core/month-constants.ts","../../src/material/datepicker/multi-year-view.ts","../../src/material/expansion/expansion-animations.ts","../../src/material/select/select.ts","../../src/material/tooltip/tooltip.ts","../../src/material/table/table-data-source.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab-label.ts","../../src/material/tabs/tab.ts","../../src/material/tabs/tabs-animations.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/paginated-tab-header.ts","../../src/material/tabs/tab-header.ts","../../src/material/tabs/tab-group.ts","../../src/material/sort/sort-header.ts","../../src/material/sort/sort-module.ts","../../src/material/stepper/step-label.ts","../../src/material/stepper/stepper-intl.ts","../../src/material/stepper/step-header.ts","../../src/material/stepper/stepper-animations.ts","../../src/material/stepper/stepper-icon.ts","../../src/material/stepper/stepper.ts","../../src/material/stepper/stepper-button.ts","../../src/material/stepper/stepper-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/text-column.ts","../../src/material/table/table-module.ts","../../src/material/slider/slider.ts","../../src/material/slider/slider-module.ts","../../src/material/snack-bar/snack-bar-ref.ts","../../src/material/snack-bar/snack-bar-config.ts","../../src/material/snack-bar/simple-snack-bar.ts","../../src/material/snack-bar/snack-bar-animations.ts","../../src/material/snack-bar/snack-bar-container.ts","../../src/material/snack-bar/snack-bar-module.ts","../../src/material/snack-bar/snack-bar.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-animations.ts","../../src/material/sort/sort-header-intl.ts","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts","../../src/material/slide-toggle/slide-toggle-config.ts","../../src/material/slide-toggle/slide-toggle.ts","../../src/material/slide-toggle/slide-toggle-required-validator.ts","../../src/material/slide-toggle/slide-toggle-module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner-module.ts","../../src/material/radio/radio.ts","../../src/material/radio/radio-module.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/select/select-module.ts","../../src/material/tooltip/tooltip-animations.ts","../../src/material/tooltip/tooltip-module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.ts","../../src/material/paginator/paginator-module.ts","../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar-module.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-module.ts","../../src/material/select/select-animations.ts","../../src/material/list/selection-list.ts","../../src/material/list/list-module.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/list/list.ts","../../src/material/expansion/expansion-panel-header.ts","../../src/material/expansion/accordion.ts","../../src/material/expansion/expansion-module.ts","../../src/material/grid-list/grid-list-base.ts","../../src/material/grid-list/grid-tile.ts","../../src/material/grid-list/tile-coordinator.ts","../../src/material/grid-list/tile-styler.ts","../../src/material/grid-list/grid-list.ts","../../src/material/grid-list/grid-list-module.ts","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts","../../src/material/datepicker/calendar.ts","../../src/material/datepicker/datepicker-animations.ts","../../src/material/datepicker/datepicker.ts","../../src/material/datepicker/datepicker-input.ts","../../src/material/datepicker/datepicker-toggle.ts","../../src/material/datepicker/datepicker-module.ts","../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/input/input.ts","../../src/material/input/input-module.ts","../../src/material/datepicker/datepicker-intl.ts","../../src/material/datepicker/calendar-body.ts","../../src/material/datepicker/month-view.ts","../../src/material/datepicker/year-view.ts","../../src/material/chips/chip-list.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/chips-module.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-animations.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","../../src/material/dialog/dialog-module.ts","../../src/material/input/autosize.ts","../../src/material/input/input-value-accessor.ts","../../src/material/card/card.ts","../../src/material/card/card-module.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox-required-validator.ts","../../src/material/checkbox/checkbox-module.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-default-options.ts","../../src/material/button/button.ts","../../src/material/button/button-module.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle-module.ts","../../src/material/form-field/form-field.ts","../../src/material/form-field/form-field-module.ts","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts","../../src/material/badge/badge.ts","../../src/material/badge/badge-module.ts","../../src/material/bottom-sheet/bottom-sheet-config.ts","../../src/material/bottom-sheet/bottom-sheet-animations.ts","../../src/material/bottom-sheet/bottom-sheet-container.ts","../../src/material/bottom-sheet/bottom-sheet-module.ts","../../src/material/bottom-sheet/bottom-sheet-ref.ts","../../src/material/bottom-sheet/bottom-sheet.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/core/label/label-options.ts","../../src/material/form-field/error.ts","../../src/material/form-field/form-field-animations.ts","../../src/material/form-field/form-field-control.ts","../../src/material/form-field/hint.ts","../../src/material/form-field/label.ts","../../src/material/form-field/placeholder.ts","../../src/material/form-field/prefix.ts","../../src/material/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/material/core/common-behaviors/common-module.ts","../../src/material/core/common-behaviors/disabled.ts","../../src/material/core/common-behaviors/color.ts","../../src/material/core/common-behaviors/disable-ripple.ts","../../src/material/core/common-behaviors/tabindex.ts","../../src/material/core/common-behaviors/error-state.ts","../../src/material/core/common-behaviors/initialized.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/line/line.ts","../../src/material/core/ripple/ripple-renderer.ts","../../src/material/form-field/form-field-errors.ts","../../src/material/input/input-errors.ts","../../src/material/datepicker/datepicker-errors.ts","../../src/material/menu/menu-errors.ts","../../src/material/select/select-errors.ts","../../src/material/sort/sort-errors.ts","../../src/material/core/version.ts","../../src/material/core/animation/animation.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/core/error/error-options.ts","../../src/material/core/gestures/gesture-config.ts","../../src/material/core/ripple/ripple-ref.ts","../../src/material/core/ripple/ripple.ts","../../src/material/core/ripple/index.ts","../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/material/core/selection/index.ts","../../src/material/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusMonitor, FocusableOption} from '@angular/cdk/a11y';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MatInkBar} from '../ink-bar';\nimport {MatPaginatedTabHeader} from '../paginated-tab-header';\n\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {\n    'class': 'mat-tab-nav-bar mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n    '[class.mat-primary]': 'color !== \"warn\" && color !== \"accent\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends MatPaginatedTabHeader implements AfterContentChecked,\n  AfterContentInit, OnDestroy {\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true}) _items: QueryList<MatTabLink>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const classList = this._elementRef.nativeElement.classList;\n    classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n  private _disableRipple: boolean = false;\n\n  /** Theme color of the nav bar. */\n  @Input() color: ThemePalette = 'primary';\n\n  constructor(elementRef: ElementRef,\n              @Optional() dir: Directionality,\n              ngZone: NgZone,\n              changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              /**\n               * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\n               */\n              @Optional() platform?: Platform,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected() {\n    // noop\n  }\n\n  ngAfterContentInit() {\n    this.updateActiveLink();\n    super.ngAfterContentInit();\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(_element?: ElementRef) {\n    if (!this._items) {\n      return;\n    }\n\n    const items = this._items.toArray();\n\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].active) {\n        this.selectedIndex = i;\n        this._changeDetectorRef.markForCheck();\n        return;\n      }\n    }\n\n    // The ink bar should hide itself if no items are active.\n    this.selectedIndex = -1;\n    this._inkBar.hide();\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkBase {}\nconst _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active ? \"page\" : null',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase implements OnDestroy, CanDisable,\n  CanDisableRipple, HasTabIndex, RippleTarget, FocusableOption {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this.elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: MatTabNav, public elementRef: ElementRef, ngZone: NgZone,\n      platform: Platform,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (animationMode === 'NoopAnimations') {\n      this.rippleConfig.animation = {enterDuration: 0, exitDuration: 0};\n    }\n\n    _focusMonitor.monitor(elementRef);\n  }\n\n  focus() {\n    this.elementRef.nativeElement.focus();\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n    this._focusMonitor.stopMonitoring(this.elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends CdkNestedTreeNode<T> implements AfterContentInit,\n  OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** Whether the node is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  /** Tabindex for the node. */\n  @Input()\n  get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  private _tabIndex: number;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]',\n  providers: [{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }]\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ConnectedPosition,\n} from '@angular/cdk/overlay';\nimport {_supportsShadowDom} from '@angular/cdk/platform';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {defer, fromEvent, merge, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {delay, filter, map, switchMap, take, tap} from 'rxjs/operators';\n\nimport {MatAutocomplete} from './autocomplete';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, AfterViewInit, OnChanges,\n  OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Whether the element is inside of a ShadowRoot component. */\n  private _isInsideShadowRoot: boolean;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n   * will render the panel underneath the trigger if there is enough space for it to fit in\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n   * whether it fits completely in the viewport.\n   */\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterViewInit() {\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n\n      if (_supportsShadowDom()) {\n        const element = this._element.nativeElement;\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n        // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n        // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n        this._isInsideShadowRoot = rootNode instanceof (window as any).ShadowRoot;\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef!.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n               fromEvent(this._document, 'click') as Observable<MouseEvent>,\n               fromEvent(this._document, 'touchend') as Observable<TouchEvent>)\n        .pipe(filter(event => {\n          // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n          // fall back to check the first element in the path of the click event.\n          const clickTarget =\n              (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                                                                event.target) as HTMLElement;\n          const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n\n          return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n        .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n              const wasOpen = this.panelOpen;\n              this._resetActiveItem();\n              this.autocomplete._setVisibility();\n\n              if (this.panelOpen) {\n                this._overlayRef!.updatePosition();\n\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                  this.autocomplete.opened.emit();\n                }\n              }\n\n              return this.panelClosingActions;\n            }),\n            // when the first closing event occurs...\n            take(1))\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n\n          // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false);\n\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const belowPosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    };\n    const abovePosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    };\n\n    let positions: ConnectedPosition[];\n\n    if (this.position === 'above') {\n      positions = [abovePosition];\n    } else if (this.position === 'below') {\n      positions = [belowPosition];\n    } else {\n      positions = [belowPosition, abovePosition];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (!isSameMultiYearView(\n      this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n\n    // We want a range years such that we maximize the number of\n    // enabled dates visible at once. This prevents issues where the minimum year\n    // is the last item of a page OR the maximum year is the first item of a page.\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view.\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(minYearOfPage + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          yearsPerPage - getActiveOffset(\n            this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n\nexport function isSameMultiYearView<D>(\n  dateAdapter: DateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean {\n  const year1 = dateAdapter.getYear(date1);\n  const year2 = dateAdapter.getYear(date2);\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) ===\n          Math.floor((year2 - startingYear) / yearsPerPage);\n}\n\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nexport function getActiveOffset<D>(\n  dateAdapter: DateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number {\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)),\n    yearsPerPage);\n}\n\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear<D>(\n  dateAdapter: DateAdapter<D>, minDate: D | null, maxDate: D | null): number {\n  let startingYear = 0;\n  if (maxDate) {\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo (a: number, b: number): number {\n  return (a % b + b) % b;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  @Input() typeaheadDebounceInterval: number;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead(this.typeaheadDebounceInterval)\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE && !hasModifierKey(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone, Optional} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {}\nconst _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {}\nconst _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectorRef,\n  ElementRef,\n  NgZone,\n  Optional,\n  QueryList,\n  EventEmitter,\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  OnDestroy,\n} from '@angular/core';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {FocusKeyManager, FocusableOption} from '@angular/cdk/a11y';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n/** Item inside a paginated tab header. */\ntype MatPaginatedTabHeaderItem = FocusableOption & {elementRef: ElementRef};\n\n/**\n * Base class for a tab header that supported pagination.\n */\nexport abstract class MatPaginatedTabHeader implements AfterContentChecked, AfterContentInit,\n  AfterViewInit, OnDestroy {\n  abstract _items: QueryList<MatPaginatedTabHeaderItem>;\n  abstract _inkBar: MatInkBar;\n  abstract _tabListContainer: ElementRef<HTMLElement>;\n  abstract _tabList: ElementRef<HTMLElement>;\n  abstract _nextPaginator: ElementRef<HTMLElement>;\n  abstract _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatPaginatedTabHeaderItem>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n\n    if (this._selectedIndex != value) {\n      this._selectedIndexChanged = true;\n      this._selectedIndex = value;\n\n      if (this._keyManager) {\n        this._keyManager.updateActiveItemIndex(value);\n      }\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              /**\n               * @deprecated @breaking-change 9.0.0 `_platform` and `_animationMode`\n               * parameters to become required.\n               */\n              private _platform?: Platform,\n              public _animationMode?: string) {\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  /** Called when the user has selected an item via the keyboard. */\n  protected abstract _itemSelected(event: KeyboardEvent): void;\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager<MatPaginatedTabHeaderItem>(this._items)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize, this._items.changes).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._items.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._items.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        this._itemSelected(event);\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent || '';\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._items) { return true; }\n\n    const tab = this._items ? this._items.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._items && this._items.length) {\n      this._items.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 9.0.0 Remove null check for `platform` after it can no longer be undefined.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    const {offsetLeft, offsetWidth} = selectedLabel.elementRef.nativeElement;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = offsetLeft;\n      labelAfterPos = labelBeforePos + offsetWidth;\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - offsetLeft;\n      labelBeforePos = labelAfterPos - offsetWidth;\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedItem = this._items && this._items.length ?\n        this._items.toArray()[this.selectedIndex] : null;\n    const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n\n    if (selectedLabelWrapper) {\n      this._inkBar.alignToElement(selectedLabelWrapper);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n  Input,\n  Inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {Platform} from '@angular/cdk/platform';\nimport {MatPaginatedTabHeader} from './paginated-tab-header';\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['selectedIndex'],\n  outputs: ['selectFocusedIndex', 'indexFocused'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends MatPaginatedTabHeader implements AfterContentChecked,\n  AfterContentInit, AfterViewInit, OnDestroy {\n\n  @ContentChildren(MatTabLabelWrapper) _items: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Optional() dir: Directionality,\n              ngZone: NgZone,\n              platform: Platform,\n              // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected(event: KeyboardEvent) {\n    event.preventDefault();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken<MatTabsConfig>('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the step header. */\n  focus() {\n    this._focusMonitor.focusVia(this._elementRef, 'program');\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if mouse coordinates need to be inverted.\n    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus(options?: FocusOptions) {\n    this._focusHostElement(options);\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement(options?: FocusOptions) {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._updateFocusTrapState();\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject<void>();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => {\n              return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n            event.preventDefault();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._updateFocusTrapState();\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    this._updateFocusTrapState();\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  /** Updates the enabled state of the focus trap. */\n  private _updateFocusTrapState() {\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this.updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        const width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        const width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    const classList = this._element.nativeElement.classList;\n    const className = 'mat-drawer-container-has-open';\n\n    if (isAdd) {\n      classList.add(className);\n    } else {\n      classList.remove(className);\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n@Directive({\n  selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n  providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n})\nexport class MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\nimport {MatSlideToggleRequiredValidator} from './slide-toggle-required-validator';\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n@NgModule({\n  exports: [MatSlideToggleRequiredValidator],\n  declarations: [MatSlideToggleRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatSlideToggleRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatRippleModule,\n    MatCommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatSlideToggle,\n    MatCommonModule\n  ],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n  private _diameter = BASE_SIZE;\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation) {\n      const trackedDiameters = MatProgressSpinner._diameters;\n      const diametersForElement = trackedDiameters.get(this._styleRoot);\n\n      if (!diametersForElement || !diametersForElement.has(this._diameter)) {\n        this._attachStyleNode();\n      }\n    }\n  }\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._styleRoot = _getShadowRoot(_elementRef.nativeElement, _document) || _document.head;\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleTag: HTMLStyleElement = this._document.createElement('style');\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n    styleTag.textContent = this._getAnimationText();\n    styleRoot.appendChild(styleTag);\n\n    if (!diametersForElement) {\n      diametersForElement = new Set<number>();\n      diameters.set(styleRoot, diametersForElement);\n    }\n\n    diametersForElement.add(currentDiameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement, _document: Document): Node | null {\n  // TODO(crisbeto): see whether we should move this into the CDK\n  // feature detection utilities once #15616 gets merged in.\n  if (typeof window !== 'undefined') {\n    const head = _document.head;\n\n    // Check whether the browser supports Shadow DOM.\n    if (head && ((head as any).createShadowRoot || head.attachShadow)) {\n      const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n      // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n      if (rootNode instanceof (window as any).ShadowRoot) {\n        return rootNode;\n      }\n    }\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nexport interface MatRadioDefaultOptions {\n  color: ThemePalette;\n}\n\nexport const MAT_RADIO_DEFAULT_OPTIONS =\n  new InjectionToken<MatRadioDefaultOptions>('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions {\n  return {\n    color: 'accent'\n  };\n}\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n      (this.radioGroup && this.radioGroup.color) ||\n      this._providerOverride && this._providerOverride.color || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n                @Optional() @Inject(MAT_RADIO_DEFAULT_OPTIONS)\n                private _providerOverride?: MatRadioDefaultOptions) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this._emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n    return undefined;\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this._emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private _emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n/** Base class with all of the `MatMenu` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** All items inside the menu. Includes items nested inside another menu. */\n  @ContentChildren(MatMenuItem, {descendants: true}) _allItems: QueryList<MatMenuItem>;\n\n  /** Only the direct descendant menu items. */\n  private _directDescendantItems = new QueryList<MatMenuItem>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n    this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._directDescendantItems.destroy();\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    const itemChanges = this._directDescendantItems.changes as Observable<QueryList<MatMenuItem>>;\n    return itemChanges.pipe(\n      startWith(this._directDescendantItems),\n      switchMap(items => merge(...items.map((item: MatMenuItem) => item._hovered)))\n    );\n  }\n\n  /*\n   * Registers a menu item with the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  addItem(_item: MatMenuItem) {}\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  removeItem(_item: MatMenuItem) {}\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   */\n  private _updateDirectDescendants() {\n    this._allItems.changes\n      .pipe(startWith(this._allItems))\n      .subscribe((items: QueryList<MatMenuItem>) => {\n        this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n        this._directDescendantItems.notifyOnChanges();\n      });\n  }\n}\n\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n/** @docs-public MatMenu */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenu extends MatMenu {\n\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'class': 'mat-menu-trigger',\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe({\n            next: () => menu.lazyContent!.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._resetMenu()\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {_MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    const list = this.selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements CanDisableRipple,\n  AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.onChange.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus(options?: FocusOptions) {\n    this._element.nativeElement.focus(options);\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DomPortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ChangeDetectorRef,\n  ComponentFactoryResolver,\n  Directive,\n  Inject,\n  Injector,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any,\n    private _changeDetectorRef?: ChangeDetectorRef) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n\n    // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n    // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n    // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n    // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n    // @breaking-change 9.0.0 Make change detector ref required\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  addItem?: (item: T) => void;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() public _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\nimport {MatAccordionTogglePosition} from './accordion-base';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@.disabled]': '_animationsDisabled',\n    '(@expansionHeight.start)': '_animationStarted()',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  /** Whether Angular animations in the panel header should be disabled. */\n  _animationsDisabled = true;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  _animationStarted() {\n    // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n    // there to work around a bug in Angular (see #13088), however this introduces a different\n    // issue. The new transition will cause the header to animate in on init (see #16067), if the\n    // consumer has set a header height that is different from the default one. We work around it\n    // by disabling animations on the header and re-enabling them after the first animation has run.\n    // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n    // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n    // for https://github.com/angular/angular/issues/18847 to be resolved.\n    this._animationsDisabled = false;\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    this._focusMonitor.focusVia(this._element, origin, options);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n/** Options that can be used to configure how an icon or the icons in an icon set are presented. */\nexport interface IconOptions {\n  /** View box to set on the icon. */\n  viewBox?: string;\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl, options?: IconOptions);\n  constructor(svgElement: SVGElement, options?: IconOptions);\n  constructor(data: SafeResourceUrl | SVGElement, public options?: IconOptions) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconInNamespace('', iconName, url, options);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl,\n                        options?: IconOptions): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml,\n                               options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral, options);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconSetInNamespace('', url, options);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal, options);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml,\n                                  options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText, config.options)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string, options?: IconOptions): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg, options);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string,\n                                 options?: IconOptions): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement, options);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg, options);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement, options?: IconOptions): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n    if (options && options.viewBox) {\n      svg.setAttribute('viewBox', options.viewBox);\n    }\n\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {\n  getActiveOffset,\n  isSameMultiYearView,\n  MatMultiYearView,\n  yearsPerPage\n} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view, and the last year is\n    // just yearsPerPage - 1 away.\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n    return `${minYearOfPage} \\u2013 ${maxYearOfPage}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.close();\n    });\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionTogglePosition} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._initWeekdays();\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Initializes the weekdays. */\n  private _initWeekdays() {\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n        return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(options?: FocusOptions): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput(options?: FocusOptions) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._inputElement.focus(options);\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, ComponentFactoryResolver} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Alternate `ComponentFactoryResolver` to use when resolving the associated component. */\n  componentFactoryResolver?: ComponentFactoryResolver;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    const element = this._elementRef.nativeElement;\n\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n\n    // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      const activeElement = this._document.activeElement;\n\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the dialog already, because it's possible that the consumer\n      // turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }))\n      .subscribe(event => {\n        event.preventDefault();\n        this.close();\n      });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n\n      // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n      this._closeFallbackTimeout = setTimeout(() => {\n        this._overlayRef.dispose();\n      }, event.totalTime + 100);\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal = new ComponentPortal(MatDialogContainer,\n        config.viewContainerRef, injector, config.componentFactoryResolver);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-card',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  }\n})\nexport class MatCard {\n  // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {}\n}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple,\n    FocusableOption {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin: FocusOrigin = 'keyboard', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, origin, options);\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              // @breaking-change 8.0.0 `animationMode` parameter to become required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple, FocusableOption {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (this._getHostElement() as HTMLElement).classList.add(attr);\n      }\n    }\n\n    // Add a class that applies to all buttons. This makes it easier to target if somebody\n    // wants to target all Material buttons. We do it here rather than `host` to ensure that\n    // the class is applied to derived classes.\n    elementRef.nativeElement.classList.add('mat-button-base');\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatButton` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    this._getHostElement().focus(options);\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle,\n                    select: boolean,\n                    isUserInput = false,\n                    deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (this._selectionModel) {\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      }\n    } else {\n      deferEvents = true;\n    }\n\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve(() => this._updateModelValue(isUserInput));\n    } else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel && this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n\n  /** Syncs up the group's value with the model and emits the change event. */\n  private _updateModelValue(isUserInput: boolean) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.name]': 'null',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n\n  /** Focuses the button. */\n  focus(options?: FocusOptions): void {\n    this._buttonElement.nativeElement.focus(options);\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n  hideRequiredMarker?: boolean;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\n  @ViewChild('label', {static: false}) private _label: ElementRef;\n\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  get _labelChild() {\n    return this._labelChildNonStatic || this._labelChildStatic;\n  }\n\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n    this._hideRequiredMarker = (_defaults && _defaults.hideRequiredMarker != null) ?\n        _defaults.hideRequiredMarker : false;\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  isDevMode,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n\n      if (isDevMode()) {\n        const nativeElement = _elementRef.nativeElement;\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\nimport {InjectionToken, ViewContainerRef} from '@angular/core';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the bottom sheet. */\n  scrollStrategy?: ScrollStrategy;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    const element = this._elementRef.nativeElement;\n\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      const activeElement = this._document.activeElement;\n\n      // Otherwise ensure that focus is on the container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the bottom sheet already, because it's possible that the\n      // consumer turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          clearTimeout(this._closeFallbackTimeout);\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(event => {\n      if (!this.disableClose &&\n        (event.type !== 'keydown' || !hasModifierKey(event as KeyboardEvent))) {\n        event.preventDefault();\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(event => {\n        // The logic that disposes of the overlay depends on the exit animation completing, however\n        // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n        // timeout which will clean everything up if the animation hasn't fired within the specified\n        // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n        // vast majority of cases the timeout will have been cleared before it has fired.\n        this._closeFallbackTimeout = setTimeout(() => {\n          this._overlayRef.dispose();\n        }, event.totalTime + 100);\n\n        this._overlayRef.detachBackdrop();\n      });\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: config.scrollStrategy || this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FocusOptions, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements FocusableOption, AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus(options);\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode, Version} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {VERSION as CDK_VERSION} from '@angular/cdk';\n\n// Private version constant to circumvent test/build issues,\n// i.e. avoid core to depend on the @angular/material primary entry-point\n// Can be removed once the Material primary entry-point no longer\n// re-exports all secondary entry-points\nconst VERSION = new Version('8.1.3-197091cf1');\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._checkCdkVersionMatch();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether the material version matches the cdk version */\n  private _checkCdkVersionMatch(): void {\n    if (VERSION.full !== CDK_VERSION.full) {\n      console.warn(\n          'The Angular Material version (' + VERSION.full + ') does not match ' +\n          'the Angular CDK version (' + CDK_VERSION.full + ').\\n' +\n          'Please ensure the versions of these two packages exactly match.'\n      );\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this._onMousedown)\n        .set('mouseup', this._onPointerUp)\n        .set('mouseleave', this._onPointerUp)\n\n        .set('touchstart', this._onTouchStart)\n        .set('touchend', this._onPointerUp)\n        .set('touchcancel', this._onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this._runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this._runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private _runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.1.3-197091cf1');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase { }\nconst _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["this","updateActiveLink","_super","prototype","ngAfterContentInit","call","MatTabNav","_element","_items","items","toArray","i","length","active","selectedIndex","_changeDetectorRef","markForCheck","_inkBar","hide","type","Component","args","selector","exportAs","inputs","template","styles","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","Platform","decorators","Optional","String","Inject","ANIMATION_MODULE_TYPE","propDecorators","_tabListContainer","ViewChild","static","_tabList","_nextPaginator","_previousPaginator","backgroundColor","Input","disableRipple","color","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","MatTabLink","_tabNavBar","elementRef","ngZone","platform","globalRippleOptions","tabIndex","_focusMonitor","animationMode","_this","_tabLinkRipple","setupTriggerEvents","nativeElement","rippleConfig","parseInt","animation","enterDuration","exitDuration","monitor","get","_isActive","value","enumerable","configurable","disabled","stopMonitoring","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","FocusMonitor","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatToolbarBase","_elementRef","_MatToolbarMixinBase","mixinColor","MatToolbarRow","MatToolbar","_platform","document","_document","tslib_1.__extends","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","Array","from","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","_MatTreeNodeMixinBase","CdkTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","_disabled","Object","defineProperty","coerceBooleanProperty","_tabIndex","ngOnDestroy","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","IterableDiffers","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTreeNodeOutlet","viewContainer","_node","CdkTreeNodeOutlet","ViewContainerRef","MatTree","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","CdkTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","pipe","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","_filter","MatTableDataSource","_sort","sort","_updateChangeSubscription","_paginator","paginator","sortChange","initialized","observableOf","pageChange","page","_internalPageChanges","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","_renderChangesSubscription","unsubscribe","_renderData","obj","filterPredicate","_updatePaginator","sortData","startIndex","pageIndex","pageSize","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_ngZone","_inkBarPositioner","_animationMode","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","positions","inkBar","left","width","[class._mat-animation-noopable]","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","distinctUntilChanged","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatPaginatedTabHeader","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","fromEvent","takeUntil","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","_handlePaginatorPress","dirChange","resize","realign","updatePagination","_alignInkBarToSelectedTab","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","newFocusIndex","_setTabFocus","ngAfterContentChecked","_tabLabelCount","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","_itemSelected","onKeydown","_onContentChanges","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","containerEl","scrollLeft","scrollWidth","scrollDistance","translateX","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedItem","selectedLabelWrapper","timer","maxScrollDistance","distance","max","Directionality","viewportRuler","_disableRipple","outputs","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","MatTabGroupBase","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","_animationDuration","test","_backgroundColor","remove","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatSortHeader","_isDisabled","_viewState","_disableViewStateAnimation","viewState","_isSorted","_arrowDirection","_setAnimationTransitionState","_showIndicatorHint","id","_getArrowDirectionState","_getArrowViewState","_updateArrowDirection","start","_getAriaSortAttribute","_renderArrow","(click)","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","disableClear","MatSortModule","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","CdkStepper","ContentChildren","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","a","b","valueA","valueB","comparatorResult","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","MatSlider","vertical","_getDirection","_invertAxis","percent","_shouldInvertMouseCoords","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_isSliding","_focusHostElement","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","_clamp","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_tickIntervalPercent","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","options","_blurHostElement","blur","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","thumbLabel","displayWith","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","_columnDef","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_setIndicatorHintVisible","visible","MatDrawer","_focusTrap","enabled","_isFocusTrapEnabled","matDrawerAnimations","transformDrawer","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-drawer-opened]","mode","HostBinding","openedChange","_openedStream","openedStart","_closedStream","closedStart","onPositionChanged","opened","_animationStartListener","HostListener","_animationDoneListener","backdropClick","_doCheckSubject","_validateDrawers","updateContentMargins","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","drawer","_drawers","_isDrawerOpen","_start","_end","debounceTime","_contentMarginChanges","close","_left","_width","_right","_contentMargins","ngDoCheck","_setContainerClass","className","throwMatDuplicatedDrawerError","_onBackdropClicked","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_onChange","_","_onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_onInputClick","toggle","_getDragPercentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","NG_VALIDATORS","MatSlideToggleRequiredValidator","CheckboxRequiredValidator","_MatSlideToggleRequiredValidatorModule","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","_isMinValue","axis","scale","_thumbGap","tickSize","backgroundSize","sign","rotate","MatProgressSpinner","_diameter","BASE_SIZE","_fallbackAnimation","trackedDiameters","_diameters","head","Set","_styleRoot","_getShadowRoot","_noopAnimations","_forceAnimations","diameter","strokeWidth","animationClass","diametersForElement","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","styleRoot","currentDiameter","diameters","setAttribute","_getAnimationText","appendChild","INDETERMINATE_ANIMATION_TEMPLATE","replace","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_DEFAULT_OPTIONS","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_providerOverride","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_color","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_trapFocus","_restoreFocus","_animationEnd","_opened","_updateFocusTrapState","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanelWrap","transformPanel","MatFormFieldControl","MatSelect","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","overlayDir","CdkConnectedOverlay","MatOption","optionGroups","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","multiple","disableOptionCentering","compareWith","errorStateMatcher","typeaheadDebounceInterval","sortComparator","selectionChange","MatSelectModule","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","_emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","_MatMenu","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MatMenuItem","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuContent","MatMenuModule","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","switchMap","option","onSelectionChange","onStable","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","panelOpen","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","withTypeAhead","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","find","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","MatListOption","_handleBlur","selectionList","_hasFocus","_setSelected","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_setOptionsFromValues","_i","item","disableRippleChanges","colorChanges","firstChange","_isDestroyed","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_MatMenuBase","_xPosition","_yPosition","_directDescendantItems","QueryList","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","_updateDirectDescendants","_item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","_allItems","reset","notifyOnChanges","defaultOptions","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","accordion","_handleHeaderFocus","expandedHeight","collapsedHeight","MatExpansionPanelHeader","_animationsDisabled","_toggle","_isExpanded","expanded","_getExpandedState","_getPanelId","_getTogglePosition","togglePosition","_showToggle","hideToggle","_keydown","_handleHeaderKeydown","_parentChangeSubscription","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","[attr.aria-controls]","[class.mat-expanded]","[class.mat-expansion-toggle-indicator-after]","[class.mat-expansion-toggle-indicator-before]","[@.disabled]","(@expansionHeight.start)","[@expansionHeight]","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_hideToggle","displayMode","_headers","header","MAT_ACCORDION","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatCalendar","MatDatepickerIntl","headerComponent","startAt","minDate","maxDate","dateFilter","dateClass","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","_setColor","_createPopup","datepicker","getConnectedOverlayOrigin","componentInstance","MatDialog","DateAdapter","calendarHeaderComponent","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","params","bodyExpansion","uniqueId","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_togglePosition","_hasSpacing","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","useValue","[class.mat-expansion-panel-spacing]","accordionHideToggleChange","AutofillMonitor","readonly","MatInput","_MatInputMixinBase","MatInputModule","MatTextareaAutosize","TextFieldModule","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","MatCalendarCell","displayValue","cssClasses","numCols","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","columnChanges","rows","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","_focusActiveCell","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_initWeekdays","_createWeekCells","_matCalendarBody","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","daysInMonth","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","yearsPerPage","isSameMultiYearView","_selectedYear","_todayYear","activeYear","minYearOfPage","getActiveOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","multi-year","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","correspondingChip","MatChipList","chips","chip","selectViaInteraction","_clearSelection","skip","MatChipListChange","_blur","_hasFocusedChip","_chipInput","focused","_markAsTouched","_allowFocusEscape","_userTabIndex","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","_lastDestroyedChipIndex","_originatesFromChip","currentElement","parentElement","_syncChipsState","_chipListMultiple","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","TAB","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_closeFallbackTimeout","_result","dialogResult","detachBackdrop","totalTime","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","splice","overlayContainer","getContainerElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","minRows","maxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","tagName","_removeTriggerEvents","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","parentChip","MatChipListBase","_MatChipListMixinBase","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","newChipIndex","MatButtonBase","_MatButtonMixinBase","MatButton","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","BUTTON_HOST_ATTRIBUTES","DEFAULT_ROUND_BUTTON_COLOR","_origin","attribute","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","deferEvents","_updateModelValue","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","[attr.name]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_supportsShadowDom","rootNode","getRootNode","_isInsideShadowRoot","ShadowRoot","_positionStrategy","_setStrategyPositions","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","composedPath","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","withPush","belowPosition","abovePosition","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","getBadgeElement","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","_parent","_active","_mostRecentViewValue","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","year1","dateAdapter","year2","startingYear","getStartingYear","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","createShadowRoot","attachShadow","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_checkCdkVersionMatch","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","full","CDK_VERSION","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","_onTouchStart","touches","changedTouches","_onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}
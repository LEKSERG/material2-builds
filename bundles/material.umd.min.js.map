{"version":3,"file":"material.umd.min.js","sources":["../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar-module.ts","../../src/material/tree/outlet.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/tree-module.ts","../../src/material/tree/data-source/flat-data-source.ts","../../src/material/tree/data-source/nested-data-source.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/core/month-constants.ts","../../src/material/expansion/expansion-animations.ts","../../src/material/select/select.ts","../../src/material/tooltip/tooltip.ts","../../src/material/tabs/tabs-animations.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/tab-header.ts","../../src/material/tabs/tab-group.ts","../../src/material/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/material/tabs/tabs-module.ts","../../src/material/sort/sort-module.ts","../../src/material/stepper/step-label.ts","../../src/material/stepper/stepper-intl.ts","../../src/material/stepper/step-header.ts","../../src/material/stepper/stepper-animations.ts","../../src/material/stepper/stepper-icon.ts","../../src/material/stepper/stepper.ts","../../src/material/stepper/stepper-button.ts","../../src/material/stepper/stepper-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/text-column.ts","../../src/material/table/table-module.ts","../../src/material/table/table-data-source.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab-label.ts","../../src/material/tabs/tab.ts","../../src/material/slider/slider.ts","../../src/material/slider/slider-module.ts","../../src/material/snack-bar/snack-bar-ref.ts","../../src/material/snack-bar/snack-bar-config.ts","../../src/material/snack-bar/simple-snack-bar.ts","../../src/material/snack-bar/snack-bar-animations.ts","../../src/material/snack-bar/snack-bar-container.ts","../../src/material/snack-bar/snack-bar-module.ts","../../src/material/snack-bar/snack-bar.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-animations.ts","../../src/material/sort/sort-header-intl.ts","../../src/material/sort/sort-header.ts","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts","../../src/material/slide-toggle/slide-toggle-config.ts","../../src/material/slide-toggle/slide-toggle.ts","../../src/material/slide-toggle/slide-toggle-module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner-module.ts","../../src/material/radio/radio.ts","../../src/material/radio/radio-module.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/select/select-module.ts","../../src/material/tooltip/tooltip-animations.ts","../../src/material/tooltip/tooltip-module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.ts","../../src/material/paginator/paginator-module.ts","../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar-module.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-module.ts","../../src/material/select/select-animations.ts","../../src/material/list/selection-list.ts","../../src/material/list/list-module.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/list/list.ts","../../src/material/expansion/accordion.ts","../../src/material/expansion/expansion-module.ts","../../src/material/grid-list/grid-list-base.ts","../../src/material/grid-list/grid-tile.ts","../../src/material/grid-list/tile-coordinator.ts","../../src/material/grid-list/tile-styler.ts","../../src/material/grid-list/grid-list.ts","../../src/material/grid-list/grid-list-module.ts","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts","../../src/material/datepicker/datepicker.ts","../../src/material/datepicker/datepicker-input.ts","../../src/material/datepicker/datepicker-toggle.ts","../../src/material/datepicker/datepicker-module.ts","../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/expansion/expansion-panel-header.ts","../../src/material/datepicker/calendar-body.ts","../../src/material/datepicker/month-view.ts","../../src/material/datepicker/multi-year-view.ts","../../src/material/datepicker/year-view.ts","../../src/material/datepicker/calendar.ts","../../src/material/datepicker/datepicker-animations.ts","../../src/material/chips/chip-list.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/chips-module.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-animations.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","../../src/material/dialog/dialog-module.ts","../../src/material/input/autosize.ts","../../src/material/input/input-value-accessor.ts","../../src/material/input/input.ts","../../src/material/input/input-module.ts","../../src/material/datepicker/datepicker-intl.ts","../../src/material/card/card-module.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox-required-validator.ts","../../src/material/checkbox/checkbox-module.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-default-options.ts","../../src/material/button/button.ts","../../src/material/button/button-module.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle-module.ts","../../src/material/card/card.ts","../../src/material/form-field/form-field.ts","../../src/material/form-field/form-field-module.ts","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts","../../src/material/badge/badge.ts","../../src/material/badge/badge-module.ts","../../src/material/bottom-sheet/bottom-sheet-config.ts","../../src/material/bottom-sheet/bottom-sheet-animations.ts","../../src/material/bottom-sheet/bottom-sheet-container.ts","../../src/material/bottom-sheet/bottom-sheet-module.ts","../../src/material/bottom-sheet/bottom-sheet-ref.ts","../../src/material/bottom-sheet/bottom-sheet.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/core/label/label-options.ts","../../src/material/form-field/error.ts","../../src/material/form-field/form-field-animations.ts","../../src/material/form-field/form-field-control.ts","../../src/material/form-field/hint.ts","../../src/material/form-field/label.ts","../../src/material/form-field/placeholder.ts","../../src/material/form-field/prefix.ts","../../src/material/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/material/core/common-behaviors/common-module.ts","../../src/material/core/common-behaviors/disabled.ts","../../src/material/core/common-behaviors/color.ts","../../src/material/core/common-behaviors/disable-ripple.ts","../../src/material/core/common-behaviors/tabindex.ts","../../src/material/core/common-behaviors/error-state.ts","../../src/material/core/common-behaviors/initialized.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/line/line.ts","../../src/material/core/ripple/ripple-renderer.ts","../../src/material/form-field/form-field-errors.ts","../../src/material/input/input-errors.ts","../../src/material/datepicker/datepicker-errors.ts","../../src/material/menu/menu-errors.ts","../../src/material/select/select-errors.ts","../../src/material/sort/sort-errors.ts","../../src/material/core/version.ts","../../src/material/core/animation/animation.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/core/error/error-options.ts","../../src/material/core/gestures/gesture-config.ts","../../src/material/core/ripple/ripple-ref.ts","../../src/material/core/ripple/ripple.ts","../../src/material/core/ripple/index.ts","../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/material/core/selection/index.ts","../../src/material/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\n\nimport {MatTreeNodeOutlet} from './outlet';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nconst _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** The children node placeholder. */\n  @ContentChildren(MatTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n      // Update the trigger, panel width and direction, in case anything has changed.\n      position.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {}\nconst _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nclass MatTabHeaderBase {}\nconst _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _platform: Platform) {\n    super();\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    if (platform.TRIDENT || platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nclass MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkBase {}\nconst _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: MatTabNav, public _elementRef: ElementRef, ngZone: NgZone,\n      platform: Platform,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n    _focusMonitor.monitor(_elementRef);\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the step header. */\n  focus() {\n    this._focusMonitor.focusVia(this._elementRef, 'program');\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {}\nconst _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase: CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor &\n    typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n/** Base class with all of the `MatMenu` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenu extends MatMenu {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {_MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the selection list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  private _document: Document;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\n  @ViewChild('label', {static: false}) private _label: ElementRef;\n\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  get _labelChild() {\n    return this._labelChildNonStatic || this._labelChildStatic;\n  }\n\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.0.0-beta.2-c0d493f');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase { }\nconst _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","type","undefined","decorators","Inject","args","DOCUMENT","MatToolbar","propDecorators","MatToolbarModule","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatTreeNodeOutlet","viewContainer","_node","this","Directive","selector","ViewContainerRef","CDK_TREE_NODE_OUTLET_NODE","Optional","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_super","_elementRef","_tree","tabIndex","_this","call","role","Number","tslib_1.__extends","exportAs","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","String","Attribute","Input","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","descendants","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","Component","template","styles","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","CdkTreeModule","CommonModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","transform","animate","transition","style","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","ngOnInit","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","Subject","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","emit","position","_positionIndex","origin","_computePositionFromOrigin","complete","_onTranslateTabStarted","nativeElement","clientHeight","_getLayoutDirection","animations","matTabsAnimations","translateTab","ChangeDetectorRef","Output","_portalHost","ViewChild","PortalHostDirective","static","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","runOutsideAngular","fromEvent","takeUntil","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","textContent","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","element","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","_MatTabLinkMixinBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatToolbarBase","_MatToolbarMixinBase","document","_document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","MatSortModule","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","providedIn","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","state","errorMessage","iconOverrides","selected","disableRipple","matStepperAnimations","horizontalStepTransition","trigger","visibility","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","_animationDone","CdkStepper","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","_controlValueAccessorChangeFn","fn","MatSlider","registerOnTouched","onTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","(click)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","_animationMode","_element","_updateContentMargins","drawer","mode","openedChange","_drawers","_setContainerClass","opened","onPositionChanged","_validateDrawers","_end","throwMatDuplicatedDrawerError","_start","_right","_left","MatDrawerContainer","_onBackdropClicked","backdropClick","_closeModalDrawer","disableClose","_canHaveBackdrop","close","_isShowingBackdrop","_isDrawerOpen","_width","_contentMargins","_contentMarginChanges","[class.mat-drawer-container-explicit-backdrop]","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","toggle","_getDragPercentage","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","MatProgressSpinner","_attachStyleNode","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","diameters","diameter","INDETERMINATE_ANIMATION_TEMPLATE","replace","_strokeCircumference","Set","BASE_SIZE","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","animationMode","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","ESCAPE","_animationEnd","_opened","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","HostBinding","_openedStream","openedStart","_closedStream","closedStart","_animationStartListener","HostListener","_animationDoneListener","_doCheckSubject","viewportRuler","_autosize","defaultAutosize","_backdropOverride","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","debounceTime","ngDoCheck","selectionChange","MatSelect","MatSelectModule","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_handleBodyInteraction","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","_fallbackAnimation","_diameter","_noopAnimations","_forceAnimations","strokeWidth","animationClass","_strokeWidth","viewBox","_circleRadius","PI","MAT_MENU_PANEL","MatMenu","_MatMenu","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuContent","MatMenuModule","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatListOption","_setSelected","selectionList","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","colorChanges","firstChange","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","matMenuAnimations","transformMenu","fadeInItems","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_MatMenuBase","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","_hasFocus","_color","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","hideToggle","displayMode","MatAccordion","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelHeader","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","_headers","header","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[class.mat-chip-list-required]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","chipListSelectable","_chipListMultiple","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_syncChipsState","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}
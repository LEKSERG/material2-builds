{"version":3,"file":"material.umd.min.js","sources":["../../src/material/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/material/tabs/tabs-module.ts","../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar-module.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/outlet.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/tree-module.ts","../../src/material/tree/data-source/flat-data-source.ts","../../src/material/tree/data-source/nested-data-source.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/core/month-constants.ts","../../src/material/datepicker/multi-year-view.ts","../../src/material/expansion/expansion-animations.ts","../../src/material/select/select.ts","../../src/material/tooltip/tooltip.ts","../../src/material/table/table-data-source.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab-label.ts","../../src/material/tabs/tab.ts","../../src/material/tabs/tabs-animations.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-group.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/paginated-tab-header.ts","../../src/material/tabs/tab-header.ts","../../src/material/sort/sort-header.ts","../../src/material/sort/sort-module.ts","../../src/material/stepper/step-label.ts","../../src/material/stepper/stepper-intl.ts","../../src/material/stepper/step-header.ts","../../src/material/stepper/stepper-animations.ts","../../src/material/stepper/stepper-icon.ts","../../src/material/stepper/stepper.ts","../../src/material/stepper/stepper-button.ts","../../src/material/stepper/stepper-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/text-column.ts","../../src/material/table/table-module.ts","../../src/material/slider/slider.ts","../../src/material/slider/slider-module.ts","../../src/material/snack-bar/snack-bar-ref.ts","../../src/material/snack-bar/snack-bar-config.ts","../../src/material/snack-bar/simple-snack-bar.ts","../../src/material/snack-bar/snack-bar-animations.ts","../../src/material/snack-bar/snack-bar-container.ts","../../src/material/snack-bar/snack-bar-module.ts","../../src/material/snack-bar/snack-bar.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-animations.ts","../../src/material/sort/sort-header-intl.ts","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts","../../src/material/slide-toggle/slide-toggle-config.ts","../../src/material/slide-toggle/slide-toggle.ts","../../src/material/slide-toggle/slide-toggle-required-validator.ts","../../src/material/slide-toggle/slide-toggle-module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner-module.ts","../../src/material/radio/radio.ts","../../src/material/radio/radio-module.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/select/select-module.ts","../../src/material/tooltip/tooltip-animations.ts","../../src/material/tooltip/tooltip-module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.ts","../../src/material/paginator/paginator-module.ts","../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar-module.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-module.ts","../../src/material/select/select-animations.ts","../../src/material/list/selection-list.ts","../../src/material/list/list-module.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/list/list.ts","../../src/material/expansion/expansion-panel-header.ts","../../src/material/expansion/accordion.ts","../../src/material/expansion/expansion-module.ts","../../src/material/grid-list/grid-list-base.ts","../../src/material/grid-list/grid-tile.ts","../../src/material/grid-list/tile-coordinator.ts","../../src/material/grid-list/tile-styler.ts","../../src/material/grid-list/grid-list.ts","../../src/material/grid-list/grid-list-module.ts","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts","../../src/material/datepicker/calendar.ts","../../src/material/datepicker/datepicker-animations.ts","../../src/material/datepicker/datepicker.ts","../../src/material/datepicker/datepicker-input.ts","../../src/material/datepicker/datepicker-toggle.ts","../../src/material/datepicker/datepicker-module.ts","../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/input/input.ts","../../src/material/input/input-module.ts","../../src/material/datepicker/datepicker-intl.ts","../../src/material/datepicker/calendar-body.ts","../../src/material/datepicker/month-view.ts","../../src/material/datepicker/year-view.ts","../../src/material/chips/chip-list.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/chips-module.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-animations.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","../../src/material/dialog/dialog-module.ts","../../src/material/input/autosize.ts","../../src/material/input/input-value-accessor.ts","../../src/material/card/card.ts","../../src/material/card/card-module.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox-required-validator.ts","../../src/material/checkbox/checkbox-module.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-default-options.ts","../../src/material/bottom-sheet/bottom-sheet.ts","../../src/material/button/button.ts","../../src/material/button/button-module.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle-module.ts","../../src/material/form-field/form-field.ts","../../src/material/form-field/form-field-module.ts","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts","../../src/material/badge/badge.ts","../../src/material/badge/badge-module.ts","../../src/material/bottom-sheet/bottom-sheet-config.ts","../../src/material/bottom-sheet/bottom-sheet-animations.ts","../../src/material/bottom-sheet/bottom-sheet-container.ts","../../src/material/bottom-sheet/bottom-sheet-module.ts","../../src/material/bottom-sheet/bottom-sheet-ref.ts","../../src/material/core/option/optgroup.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/core/label/label-options.ts","../../src/material/form-field/error.ts","../../src/material/form-field/form-field-animations.ts","../../src/material/form-field/form-field-control.ts","../../src/material/form-field/hint.ts","../../src/material/form-field/label.ts","../../src/material/form-field/placeholder.ts","../../src/material/form-field/prefix.ts","../../src/material/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/material/core/common-behaviors/common-module.ts","../../src/material/core/common-behaviors/disabled.ts","../../src/material/core/common-behaviors/color.ts","../../src/material/core/common-behaviors/disable-ripple.ts","../../src/material/core/common-behaviors/tabindex.ts","../../src/material/core/common-behaviors/error-state.ts","../../src/material/core/common-behaviors/initialized.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/line/line.ts","../../src/material/core/ripple/ripple-renderer.ts","../../src/material/form-field/form-field-errors.ts","../../src/material/input/input-errors.ts","../../src/material/datepicker/datepicker-errors.ts","../../src/material/menu/menu-errors.ts","../../src/material/select/select-errors.ts","../../src/material/sort/sort-errors.ts","../../src/material/core/version.ts","../../src/material/core/animation/animation.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/core/error/error-options.ts","../../src/material/core/gestures/gesture-config.ts","../../src/material/core/ripple/ripple-ref.ts","../../src/material/core/ripple/ripple.ts","../../src/material/core/ripple/index.ts","../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/material/core/selection/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusMonitor, FocusableOption} from '@angular/cdk/a11y';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MatInkBar} from '../ink-bar';\nimport {MatPaginatedTabHeader, MatPaginatedTabHeaderItem} from '../paginated-tab-header';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\n/** Base class with all of the `MatTabNav` functionality. */\n// tslint:disable-next-line:class-name\nexport abstract class _MatTabNavBase extends MatPaginatedTabHeader implements AfterContentChecked,\n  AfterContentInit, OnDestroy {\n\n  /** Query list of all tab links of the tab navigation. */\n  abstract _items: QueryList<MatPaginatedTabHeaderItem & {active: boolean}>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const classList = this._elementRef.nativeElement.classList;\n    classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n  private _disableRipple: boolean = false;\n\n  /** Theme color of the nav bar. */\n  @Input() color: ThemePalette = 'primary';\n\n  constructor(elementRef: ElementRef,\n              @Optional() dir: Directionality,\n              ngZone: NgZone,\n              changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              /**\n               * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\n               */\n              @Optional() platform?: Platform,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected() {\n    // noop\n  }\n\n  ngAfterContentInit() {\n    // We need this to run before the `changes` subscription in parent to ensure that the\n    // selectedIndex is up-to-date by the time the super class starts looking for it.\n    this._items.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this.updateActiveLink();\n    });\n\n    super.ngAfterContentInit();\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(_element?: ElementRef) {\n    if (!this._items) {\n      return;\n    }\n\n    const items = this._items.toArray();\n\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].active) {\n        this.selectedIndex = i;\n        this._changeDetectorRef.markForCheck();\n        return;\n      }\n    }\n\n    // The ink bar should hide itself if no items are active.\n    this.selectedIndex = -1;\n    this._inkBar.hide();\n  }\n}\n\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {\n    'class': 'mat-tab-nav-bar mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n    '[class.mat-primary]': 'color !== \"warn\" && color !== \"accent\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavBase {\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true}) _items: QueryList<MatTabLink>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  constructor(elementRef: ElementRef,\n    @Optional() dir: Directionality,\n    ngZone: NgZone,\n    changeDetectorRef: ChangeDetectorRef,\n    viewportRuler: ViewportRuler,\n    /**\n     * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\n     */\n    @Optional() platform?: Platform,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, platform, animationMode);\n  }\n}\n\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkMixinBase {}\nconst _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkMixinBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkMixinBase)));\n\n/** Base class with all of the `MatTabLink` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatTabLinkBase extends _MatTabLinkMixinBase implements OnDestroy, CanDisable,\n  CanDisableRipple, HasTabIndex, RippleTarget, FocusableOption {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this.elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: _MatTabNavBase, public elementRef: ElementRef,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super();\n\n    this.rippleConfig = globalRippleOptions || {};\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (animationMode === 'NoopAnimations') {\n      this.rippleConfig.animation = {enterDuration: 0, exitDuration: 0};\n    }\n\n    _focusMonitor.monitor(elementRef);\n  }\n\n  focus() {\n    this.elementRef.nativeElement.focus();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this.elementRef);\n  }\n}\n\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active ? \"page\" : null',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkBase implements OnDestroy {\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  constructor(\n    tabNavBar: MatTabNav, elementRef: ElementRef, ngZone: NgZone,\n    platform: Platform,\n    @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n    @Attribute('tabindex') tabIndex: string, focusMonitor: FocusMonitor,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(tabNavBar, elementRef, globalRippleOptions, tabIndex, focusMonitor, animationMode);\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(elementRef.nativeElement);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends CdkNestedTreeNode<T> implements AfterContentInit,\n  OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** Whether the node is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  /** Tabindex for the node. */\n  @Input()\n  get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  private _tabIndex: number;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]',\n  providers: [{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }]\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ConnectedPosition,\n} from '@angular/cdk/overlay';\nimport {_supportsShadowDom} from '@angular/cdk/platform';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {defer, fromEvent, merge, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {delay, filter, map, switchMap, take, tap} from 'rxjs/operators';\n\nimport {MatAutocomplete} from './autocomplete';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'class': 'mat-autocomplete-trigger',\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, AfterViewInit, OnChanges,\n  OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Whether the element is inside of a ShadowRoot component. */\n  private _isInsideShadowRoot: boolean;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n   * will render the panel underneath the trigger if there is enough space for it to fit in\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n   * whether it fits completely in the viewport.\n   */\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterViewInit() {\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n\n      if (_supportsShadowDom()) {\n        const element = this._element.nativeElement;\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n        // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n        // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n        this._isInsideShadowRoot = rootNode instanceof (window as any).ShadowRoot;\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef!.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n               fromEvent(this._document, 'click') as Observable<MouseEvent>,\n               fromEvent(this._document, 'touchend') as Observable<TouchEvent>)\n        .pipe(filter(event => {\n          // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n          // fall back to check the first element in the path of the click event.\n          const clickTarget =\n              (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                                                                event.target) as HTMLElement;\n          const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n\n          return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n        .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n              const wasOpen = this.panelOpen;\n              this._resetActiveItem();\n              this.autocomplete._setVisibility();\n\n              if (this.panelOpen) {\n                this._overlayRef!.updatePosition();\n\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                  this.autocomplete.opened.emit();\n                }\n              }\n\n              return this.panelClosingActions;\n            }),\n            // when the first closing event occurs...\n            take(1))\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n\n          // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false);\n\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const belowPosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    };\n    const abovePosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    };\n\n    let positions: ConnectedPosition[];\n\n    if (this.position === 'above') {\n      positions = [abovePosition];\n    } else if (this.position === 'below') {\n      positions = [belowPosition];\n    } else {\n      positions = [belowPosition, abovePosition];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (!isSameMultiYearView(\n      this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n\n    // We want a range years such that we maximize the number of\n    // enabled dates visible at once. This prevents issues where the minimum year\n    // is the last item of a page OR the maximum year is the first item of a page.\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view.\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(minYearOfPage + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          yearsPerPage - getActiveOffset(\n            this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n\nexport function isSameMultiYearView<D>(\n  dateAdapter: DateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean {\n  const year1 = dateAdapter.getYear(date1);\n  const year2 = dateAdapter.getYear(date2);\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) ===\n          Math.floor((year2 - startingYear) / yearsPerPage);\n}\n\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nexport function getActiveOffset<D>(\n  dateAdapter: DateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number {\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)),\n    yearsPerPage);\n}\n\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear<D>(\n  dateAdapter: DateAdapter<D>, minDate: D | null, maxDate: D | null): number {\n  let startingYear = 0;\n  if (maxDate) {\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo (a: number, b: number): number {\n  return (a % b + b) % b;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  @Input() typeaheadDebounceInterval: number;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead(this.typeaheadDebounceInterval)\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      if (wasSelected !== option.selected) {\n        option.selected ? this._selectionModel.select(option) :\n                          this._selectionModel.deselect(option);\n      }\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ngZone.runOutsideAngular(() => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(() => {\n          this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n        });\n      });\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE && !hasModifierKey(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone, Optional} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {}\nconst _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/** Base class with all of the `MatTabBody` functionality. */\n// tslint:disable-next-line:class-name\nexport abstract class _MatTabBodyBase implements OnInit, OnDestroy {\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  abstract _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  }\n})\nexport class MatTabBody extends _MatTabBodyBase {\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              @Optional() dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef, dir, changeDetectorRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken<MatTabsConfig>('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupMixinBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupMixinBase =\n    mixinColor(mixinDisableRipple(MatTabGroupMixinBase), 'primary');\n\ninterface MatTabGroupBaseHeader {\n  _alignInkBarToSelectedTab: () => void;\n  focusIndex: number;\n}\n\n/** Base class with all of the `MatTabGroupBase` functionality. */\n// tslint:disable-next-line:class-name\nexport abstract class _MatTabGroupBase extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n  abstract _tabs: QueryList<MatTab>;\n  abstract _tabBodyWrapper: ElementRef;\n  abstract _tabHeader: MatTabGroupBaseHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabGroupBaseHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n\n/**\n * Material design tab-group component. Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupBase {\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabGroupBaseHeader;\n\n  constructor(elementRef: ElementRef,\n              changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, defaultConfig, animationMode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {}\nconst _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectorRef,\n  ElementRef,\n  NgZone,\n  Optional,\n  QueryList,\n  EventEmitter,\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  OnDestroy,\n} from '@angular/core';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {FocusKeyManager, FocusableOption} from '@angular/cdk/a11y';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n/** Item inside a paginated tab header. */\nexport type MatPaginatedTabHeaderItem = FocusableOption & {elementRef: ElementRef};\n\n/**\n * Base class for a tab header that supported pagination.\n */\nexport abstract class MatPaginatedTabHeader implements AfterContentChecked, AfterContentInit,\n  AfterViewInit, OnDestroy {\n  abstract _items: QueryList<MatPaginatedTabHeaderItem>;\n  abstract _inkBar: {hide: () => void, alignToElement: (element: HTMLElement) => void};\n  abstract _tabListContainer: ElementRef<HTMLElement>;\n  abstract _tabList: ElementRef<HTMLElement>;\n  abstract _nextPaginator: ElementRef<HTMLElement>;\n  abstract _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  protected readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatPaginatedTabHeaderItem>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n\n    if (this._selectedIndex != value) {\n      this._selectedIndexChanged = true;\n      this._selectedIndex = value;\n\n      if (this._keyManager) {\n        this._keyManager.updateActiveItemIndex(value);\n      }\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              /**\n               * @deprecated @breaking-change 9.0.0 `_platform` and `_animationMode`\n               * parameters to become required.\n               */\n              private _platform?: Platform,\n              public _animationMode?: string) {\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  /** Called when the user has selected an item via the keyboard. */\n  protected abstract _itemSelected(event: KeyboardEvent): void;\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager<MatPaginatedTabHeaderItem>(this._items)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize, this._items.changes).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._items.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._items.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        this._itemSelected(event);\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent || '';\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._items) { return true; }\n\n    const tab = this._items ? this._items.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._items && this._items.length) {\n      this._items.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 9.0.0 Remove null check for `platform` after it can no longer be undefined.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    const {offsetLeft, offsetWidth} = selectedLabel.elementRef.nativeElement;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = offsetLeft;\n      labelAfterPos = labelBeforePos + offsetWidth;\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - offsetLeft;\n      labelBeforePos = labelAfterPos - offsetWidth;\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedItem = this._items && this._items.length ?\n        this._items.toArray()[this.selectedIndex] : null;\n    const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n\n    if (selectedLabelWrapper) {\n      this._inkBar.alignToElement(selectedLabelWrapper);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n  Input,\n  Inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {Platform} from '@angular/cdk/platform';\nimport {MatPaginatedTabHeader} from './paginated-tab-header';\n\n/** Base class with all of the `MatTabHeader` functionality. */\n// tslint:disable-next-line:class-name\nexport abstract class _MatTabHeaderBase extends MatPaginatedTabHeader implements\n  AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy {\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Optional() dir: Directionality,\n              ngZone: NgZone,\n              platform: Platform,\n              // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected(event: KeyboardEvent) {\n    event.preventDefault();\n  }\n}\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['selectedIndex'],\n  outputs: ['selectFocusedIndex', 'indexFocused'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderBase {\n  @ContentChildren(MatTabLabelWrapper) _items: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  constructor(elementRef: ElementRef,\n              changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Optional() dir: Directionality,\n              ngZone: NgZone,\n              platform: Platform,\n              // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the step header. */\n  focus() {\n    this._focusMonitor.focusVia(this._elementRef, 'program');\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    // On Safari starting to slide temporarily triggers text selection mode which\n    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n    '(selectstart)': '$event.preventDefault()',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if mouse coordinates need to be inverted.\n    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      // Value is never null but since setters and getters cannot have\n      // different types, the value getter is also typed to return null.\n      return this.displayWith(this.value!);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus(options?: FocusOptions) {\n    this._focusHostElement(options);\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement(options?: FocusOptions) {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(\n      takeUntil(overlayRef.detachments())\n    ).subscribe(state => {\n      const classList = overlayRef.overlayElement.classList;\n      const className = 'mat-snack-bar-handset';\n      state.matches ? classList.add(className) : classList.remove(className);\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._updateFocusTrapState();\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject<void>();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => {\n              return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n            event.preventDefault();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._updateFocusTrapState();\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    this._updateFocusTrapState();\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  /** Updates the enabled state of the focus trap. */\n  private _updateFocusTrapState() {\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this.updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        const width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        const width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    const classList = this._element.nativeElement.classList;\n    const className = 'mat-drawer-container-has-open';\n\n    if (isAdd) {\n      classList.add(className);\n    } else {\n      classList.remove(className);\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /**\n   * Whether drag action triggers value changes in slide toggle.\n   * @deprecated No longer being used.\n   * @breaking-change 10.0.0\n   */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 10.0.0\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n                /**\n                 * @deprecated `_ngZone` and `_dir` parameters to be removed.\n                 * @breaking-change 10.0.0\n                 */\n              _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n    this.toggleChange.emit();\n\n    // When the slide toggle's config disables toggle change event by setting\n    // `disableToggleValue: true`, the slide toggle's value does not change, and the\n    // checked state of the underlying input needs to be changed back.\n    if (this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n@Directive({\n  selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n  providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n})\nexport class MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatSlideToggle} from './slide-toggle';\nimport {MatSlideToggleRequiredValidator} from './slide-toggle-required-validator';\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n@NgModule({\n  exports: [MatSlideToggleRequiredValidator],\n  declarations: [MatSlideToggleRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatSlideToggleRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatRippleModule,\n    MatCommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatSlideToggle,\n    MatCommonModule\n  ],\n  declarations: [MatSlideToggle],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements OnInit, CanColor {\n  private _diameter = BASE_SIZE;\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n    if (!this._fallbackAnimation && this._styleRoot) {\n      this._attachStyleNode();\n    }\n  }\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n  }\n\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n\n    // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n    // Angular seems to create the element outside the shadow root and then moves it inside, if the\n    // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n    this._styleRoot = _getShadowRoot(element, this._document) || this._document.head;\n    this._attachStyleNode();\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    element.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n      const styleTag: HTMLStyleElement = this._document.createElement('style');\n      styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n      styleTag.textContent = this._getAnimationText();\n      styleRoot.appendChild(styleTag);\n\n      if (!diametersForElement) {\n        diametersForElement = new Set<number>();\n        diameters.set(styleRoot, diametersForElement);\n      }\n\n      diametersForElement.add(currentDiameter);\n    }\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement, _document: Document): Node | null {\n  // TODO(crisbeto): see whether we should move this into the CDK\n  // feature detection utilities once #15616 gets merged in.\n  if (typeof window !== 'undefined') {\n    const head = _document.head;\n\n    // Check whether the browser supports Shadow DOM.\n    if (head && ((head as any).createShadowRoot || head.attachShadow)) {\n      const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n      // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n      if (rootNode instanceof (window as any).ShadowRoot) {\n        return rootNode;\n      }\n    }\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nexport interface MatRadioDefaultOptions {\n  color: ThemePalette;\n}\n\nexport const MAT_RADIO_DEFAULT_OPTIONS =\n  new InjectionToken<MatRadioDefaultOptions>('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions {\n  return {\n    color: 'accent'\n  };\n}\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[attr.aria-describedby]': 'null',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n      (this.radioGroup && this.radioGroup.color) ||\n      this._providerOverride && this._providerOverride.color || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n                @Optional() @Inject(MAT_RADIO_DEFAULT_OPTIONS)\n                private _providerOverride?: MatRadioDefaultOptions) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} – ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this._emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n    return undefined;\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this._emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private _emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n/** Base class with all of the `MatMenu` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** All items inside the menu. Includes items nested inside another menu. */\n  @ContentChildren(MatMenuItem, {descendants: true}) _allItems: QueryList<MatMenuItem>;\n\n  /** Only the direct descendant menu items. */\n  private _directDescendantItems = new QueryList<MatMenuItem>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n    this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._directDescendantItems.destroy();\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    const itemChanges = this._directDescendantItems.changes as Observable<QueryList<MatMenuItem>>;\n    return itemChanges.pipe(\n      startWith(this._directDescendantItems),\n      switchMap(items => merge(...items.map((item: MatMenuItem) => item._hovered)))\n    );\n  }\n\n  /*\n   * Registers a menu item with the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  addItem(_item: MatMenuItem) {}\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  removeItem(_item: MatMenuItem) {}\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    const manager = this._keyManager;\n\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => manager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      manager.setFocusOrigin(origin).setFirstItemActive();\n    }\n\n    // If there's no active item at this point, it means that all the items are disabled.\n    // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n    // give _some_ feedback to screen readers.\n    if (!manager.activeItem && this._directDescendantItems.length) {\n      let element = this._directDescendantItems.first._getHostElement().parentElement;\n\n      // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n      // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n      // because the panel is inside an `ng-template`. We work around it by starting from one of\n      // the items and walking up the DOM.\n      while (element) {\n        if (element.getAttribute('role') === 'menu') {\n          element.focus();\n          break;\n        } else {\n          element = element.parentElement;\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   */\n  private _updateDirectDescendants() {\n    this._allItems.changes\n      .pipe(startWith(this._allItems))\n      .subscribe((items: QueryList<MatMenuItem>) => {\n        this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n        this._directDescendantItems.notifyOnChanges();\n      });\n  }\n}\n\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n/** @docs-public MatMenu */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenu extends MatMenu {\n\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'class': 'mat-menu-trigger',\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe({\n            next: () => menu.lazyContent!.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._setIsMenuOpen(false)\n          });\n      } else {\n        this._setIsMenuOpen(false);\n      }\n    } else {\n      this._setIsMenuOpen(false);\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n\n    this._restoreFocus();\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /** Restores focus to the element that was focused before the menu was open. */\n  private _restoreFocus() {\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {_MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    const list = this.selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements CanDisableRipple,\n  AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.onChange.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus(options?: FocusOptions) {\n    this._element.nativeElement.focus(options);\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DomPortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ChangeDetectorRef,\n  ComponentFactoryResolver,\n  Directive,\n  Inject,\n  Injector,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any,\n    private _changeDetectorRef?: ChangeDetectorRef) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n\n    // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n    // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n    // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n    // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n    // @breaking-change 9.0.0 Make change detector ref required\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  addItem?: (item: T) => void;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() public _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\nimport {MatAccordionTogglePosition} from './accordion-base';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@.disabled]': '_animationsDisabled',\n    '(@expansionHeight.start)': '_animationStarted()',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  /** Whether Angular animations in the panel header should be disabled. */\n  _animationsDisabled = true;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  _animationStarted() {\n    // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n    // there to work around a bug in Angular (see #13088), however this introduces a different\n    // issue. The new transition will cause the header to animate in on init (see #16067), if the\n    // consumer has set a header height that is different from the default one. We work around it\n    // by disabling animations on the header and re-enabling them after the first animation has run.\n    // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n    // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n    // for https://github.com/angular/angular/issues/18847 to be resolved.\n    this._animationsDisabled = false;\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    this._focusMonitor.focusVia(this._element, origin, options);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  ErrorHandler,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n/** Options that can be used to configure how an icon or the icons in an icon set are presented. */\nexport interface IconOptions {\n  /** View box to set on the icon. */\n  viewBox?: string;\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl, options?: IconOptions);\n  constructor(svgElement: SVGElement, options?: IconOptions);\n  constructor(data: SafeResourceUrl | SVGElement, public options?: IconOptions) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any,\n    // @breaking-change 9.0.0 _errorHandler parameter to be made required\n    @Optional() private readonly _errorHandler?: ErrorHandler) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconInNamespace('', iconName, url, options);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl,\n                        options?: IconOptions): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml,\n                               options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral, options);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconSetInNamespace('', url, options);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal, options);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml,\n                                  options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n            // @breaking-change 9.0.0 _errorHandler parameter to be made required\n            if (this._errorHandler) {\n              this._errorHandler.handleError(new Error(errorMessage));\n            } else {\n              console.error(errorMessage);\n            }\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText, config.options)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string, options?: IconOptions): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg, options);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string,\n                                 options?: IconOptions): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement, options);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg, options);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    const svg = this._svgElementFromString('<svg></svg>');\n    const attributes = element.attributes;\n\n    // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n    for (let i = 0; i < attributes.length; i++) {\n      const {name, value} = attributes[i];\n\n      if (name !== 'id') {\n        svg.setAttribute(name, value);\n      }\n    }\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement, options?: IconOptions): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n    if (options && options.viewBox) {\n      svg.setAttribute('viewBox', options.viewBox);\n    }\n\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any,\n  errorHandler?: ErrorHandler) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), ErrorHandler],\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewChecked,\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ErrorHandler,\n  inject,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {take} from 'rxjs/operators';\n\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>, private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation,\n      // @breaking-change 9.0.0 _errorHandler parameter to be made required\n      @Optional() private readonly _errorHandler?: ErrorHandler) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n            .pipe(take(1))\n            .subscribe(svg => this._setSvgElement(svg), (err: Error) => {\n              const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n              // @breaking-change 9.0.0 _errorHandler parameter to be made required.\n              if (this._errorHandler) {\n                this._errorHandler.handleError(new Error(errorMessage));\n              } else {\n                console.error(errorMessage);\n              }\n            });\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {\n  getActiveOffset,\n  isSameMultiYearView,\n  MatMultiYearView,\n  yearsPerPage\n} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view, and the last year is\n    // just yearsPerPage - 1 away.\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n    return `${minYearOfPage} \\u2013 ${maxYearOfPage}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.close();\n    });\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionTogglePosition} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._initWeekdays();\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Initializes the weekdays. */\n  private _initWeekdays() {\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n        return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(options?: FocusOptions): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput(options?: FocusOptions) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._inputElement.focus(options);\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, ComponentFactoryResolver} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Alternate `ComponentFactoryResolver` to use when resolving the associated component. */\n  componentFactoryResolver?: ComponentFactoryResolver;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    const element = this._elementRef.nativeElement;\n\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n\n    // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      const activeElement = this._document.activeElement;\n\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the dialog already, because it's possible that the consumer\n      // turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/** Possible states of the lifecycle of a dialog. */\nexport const enum MatDialogState {OPEN, CLOSING, CLOSED}\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  /** Current state of the dialog. */\n  private _state = MatDialogState.OPEN;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }))\n      .subscribe(event => {\n        event.preventDefault();\n        this.close();\n      });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._state = MatDialogState.CLOSED;\n      this._overlayRef.detachBackdrop();\n\n      // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n      this._closeFallbackTimeout = setTimeout(() => {\n        this._overlayRef.dispose();\n      }, event.totalTime + 100);\n    });\n\n    this._containerInstance._startExitAnimation();\n    this._state = MatDialogState.CLOSING;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Gets the current state of the dialog's lifecycle. */\n  getState(): MatDialogState {\n    return this._state;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal = new ComponentPortal(MatDialogContainer,\n        config.viewContainerRef, injector, config.componentFactoryResolver);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.type]': 'type',\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Default to \"button\" to prevents accidental form submits. */\n  @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-card',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  }\n})\nexport class MatCard {\n  // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {}\n}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple,\n    FocusableOption {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin: FocusOrigin = 'keyboard', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, origin, options);\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value !== undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              // @breaking-change 8.0.0 `animationMode` parameter to become required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              // @breaking-change 9.0.0 `_changeDetectorRef` parameter to become required.\n              private _changeDetectorRef?: ChangeDetectorRef) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef);\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n      this._markForCheck();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n      this._markForCheck();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n      this._markForCheck();\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    this._markForCheck();\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n\n  private _markForCheck() {\n    // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: config.scrollStrategy || this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple, FocusableOption {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (this._getHostElement() as HTMLElement).classList.add(attr);\n      }\n    }\n\n    // Add a class that applies to all buttons. This makes it easier to target if somebody\n    // wants to target all Material buttons. We do it here rather than `host` to ensure that\n    // the class is applied to derived classes.\n    elementRef.nativeElement.classList.add('mat-button-base');\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatButton` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    this._getHostElement().focus(options);\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle,\n                    select: boolean,\n                    isUserInput = false,\n                    deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (this._selectionModel) {\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      }\n    } else {\n      deferEvents = true;\n    }\n\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve(() => this._updateModelValue(isUserInput));\n    } else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel && this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n\n  /** Syncs up the group's value with the model and emits the change event. */\n  private _updateModelValue(isUserInput: boolean) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.name]': 'null',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n\n  /** Focuses the button. */\n  focus(options?: FocusOptions): void {\n    this._buttonElement.nativeElement.focus(options);\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n  hideRequiredMarker?: boolean;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\n  @ViewChild('label', {static: false}) private _label: ElementRef;\n\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  get _labelChild() {\n    return this._labelChildNonStatic || this._labelChildStatic;\n  }\n\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n    this._hideRequiredMarker = (_defaults && _defaults.hideRequiredMarker != null) ?\n        _defaults.hideRequiredMarker : false;\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  isDevMode,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n\n      if (isDevMode()) {\n        const nativeElement = _elementRef.nativeElement;\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\nimport {InjectionToken, ViewContainerRef} from '@angular/core';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the bottom sheet. */\n  scrollStrategy?: ScrollStrategy;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    const element = this._elementRef.nativeElement;\n\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      const activeElement = this._document.activeElement;\n\n      // Otherwise ensure that focus is on the container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the bottom sheet already, because it's possible that the\n      // consumer turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          clearTimeout(this._closeFallbackTimeout);\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(event => {\n      if (!this.disableClose &&\n        (event.type !== 'keydown' || !hasModifierKey(event as KeyboardEvent))) {\n        event.preventDefault();\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(event => {\n        // The logic that disposes of the overlay depends on the exit animation completing, however\n        // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n        // timeout which will clean everything up if the animation hasn't fired within the specified\n        // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n        // vast majority of cases the timeout will have been cleared before it has fired.\n        this._closeFallbackTimeout = setTimeout(() => {\n          this._overlayRef.dispose();\n        }, event.totalTime + 100);\n\n        this._overlayRef.detachBackdrop();\n      });\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase { }\nconst _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FocusOptions, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements FocusableOption, AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus(options);\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode, Version} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {VERSION as CDK_VERSION} from '@angular/cdk';\n\n// Private version constant to circumvent test/build issues,\n// i.e. avoid core to depend on the @angular/material primary entry-point\n// Can be removed once the Material primary entry-point no longer\n// re-exports all secondary entry-points\nconst VERSION = new Version('8.2.0-14cdd8954');\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): SanityChecks {\n  return true;\n}\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<SanityChecks>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/**\n * Possible sanity checks that can be enabled. If set to\n * true/false, all checks will be enabled/disabled.\n */\nexport type SanityChecks = boolean | GranularSanityChecks;\n\n/** Object that can be used to configure the sanity checks granularly. */\nexport interface GranularSanityChecks {\n  doctype: boolean;\n  theme: boolean;\n  version: boolean;\n  hammer: boolean;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  /** Configured sanity checks. */\n  private _sanityChecks: SanityChecks;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) sanityChecks: any,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    // Note that `_sanityChecks` is typed to `any`, because AoT\n    // throws an error if we use the `SanityChecks` type directly.\n    this._sanityChecks = sanityChecks;\n\n    if (!this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._checkCdkVersionMatch();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled. */\n  private _checksAreEnabled(): boolean {\n    return isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    const isEnabled = this._checksAreEnabled() &&\n      (this._sanityChecks === true || (this._sanityChecks as GranularSanityChecks).doctype);\n\n    if (isEnabled && this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    const isDisabled = !this._checksAreEnabled() ||\n      (this._sanityChecks === false || !(this._sanityChecks as GranularSanityChecks).theme);\n\n    if (isDisabled || !this._document || !this._document.body ||\n        typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether the material version matches the cdk version */\n  private _checkCdkVersionMatch(): void {\n    const isEnabled = this._checksAreEnabled() &&\n      (this._sanityChecks === true || (this._sanityChecks as GranularSanityChecks).version);\n\n    if (isEnabled && VERSION.full !== CDK_VERSION.full) {\n      console.warn(\n          'The Angular Material version (' + VERSION.full + ') does not match ' +\n          'the Angular CDK version (' + CDK_VERSION.full + ').\\n' +\n          'Please ensure the versions of these two packages exactly match.'\n      );\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    const isEnabled = this._checksAreEnabled() &&\n      (this._sanityChecks === true || (this._sanityChecks as GranularSanityChecks).hammer);\n\n    if (isEnabled && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from its utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementOrElementRef: HTMLElement | ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = coerceElement(elementOrElementRef);\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this._onMousedown)\n        .set('mouseup', this._onPointerUp)\n        .set('mouseleave', this._onPointerUp)\n\n        .set('touchstart', this._onTouchStart)\n        .set('touchend', this._onPointerUp)\n        .set('touchcancel', this._onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this._runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this._runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(elementOrElementRef: HTMLElement | ElementRef<HTMLElement>) {\n    const element = coerceElement(elementOrElementRef);\n\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private _runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.2.0-14cdd8954');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse or touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n"],"names":["this","_changeDetectorRef","markForCheck","selectedIndex","_inkBar","hide","type","ElementRef","Directionality","decorators","Optional","NgZone","ChangeDetectorRef","ViewportRuler","Platform","String","Inject","args","ANIMATION_MODULE_TYPE","backgroundColor","Input","disableRipple","color","_MatTabNavBase","MatPaginatedTabHeader","MatTabNav","_super","elementRef","dir","ngZone","changeDetectorRef","viewportRuler","platform","animationMode","call","tslib_1.__extends","Component","selector","exportAs","inputs","template","styles","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","_tabListContainer","ViewChild","static","_tabList","_nextPaginator","_previousPaginator","MatTabLinkMixinBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_MatTabLinkBase","_tabNavBar","globalRippleOptions","tabIndex","_focusMonitor","_this","parseInt","rippleConfig","animation","enterDuration","exitDuration","monitor","get","_isActive","value","updateActiveLink","enumerable","configurable","disabled","ctorParameters","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","FocusMonitor","MatTabLink","tabNavBar","focusMonitor","_tabLinkRipple","RippleRenderer","setupTriggerEvents","nativeElement","_removeTriggerEvents","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatToolbarBase","_elementRef","_MatToolbarMixinBase","mixinColor","MatToolbarRow","MatToolbar","_platform","document","_document","prototype","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","Array","from","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","_MatTreeNodeMixinBase","CdkTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","_disabled","Object","defineProperty","coerceBooleanProperty","_tabIndex","ngAfterContentInit","ngOnDestroy","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","IterableDiffers","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTreeNodeOutlet","viewContainer","_node","CdkTreeNodeOutlet","ViewContainerRef","MatTree","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","CdkTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","pipe","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","MatTableDataSource","_orderData","sort","sortData","_pageData","paginator","startIndex","pageIndex","pageSize","_updatePaginator","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","_internalPageChanges","_renderData","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_ngZone","_inkBarPositioner","_animationMode","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","positions","inkBar","left","width","[class._mat-animation-noopable]","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_MatTabBodyBase","_dir","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","change","_computePositionAnimationState","distinctUntilChanged","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","Output","animations","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","MatTabGroupMixinBase","_MatTabGroupMixinBase","_MatTabGroupBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceNumberProperty","_animationDuration","test","_backgroundColor","remove","add","ngAfterContentChecked","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","tab","_subscribeToTabLabels","tabs","toArray","realignInkBar","_tabHeader","_alignInkBarToSelectedTab","_focusChanged","max","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","focusIndex","_getTabIndex","idx","dynamicHeight","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","selectFocusedIndex","indexFocused","fromEvent","takeUntil","_stopInterval","_keyManager","updateActiveItemIndex","_handlePaginatorPress","dirChange","observableOf","resize","realign","updatePagination","FocusKeyManager","_items","withHorizontalOrientation","withWrap","updateActiveItem","newFocusIndex","_setTabFocus","_tabLabelCount","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","_itemSelected","onKeydown","_onContentChanges","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","containerEl","scrollLeft","scrollWidth","scrollDistance","translateX","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","_a","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedItem","selectedLabelWrapper","timer","maxScrollDistance","distance","_MatTabHeaderBase","_disableRipple","outputs","_element","items","active","(click)","(mouseenter)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","MatSortHeader","start","disableClear","MatSortModule","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","stopMonitoring","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","CdkStepper","ContentChildren","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","paginatedData","obj","_isSliding","_focusHostElement","_updateValueFromPosition","clientX","clientY","oldValue","_emitInputEvent","_emitChangeEvent","MatSlider","_onSlide","_onSlideStart","center","_onMouseenter","_valueOnSlideStart","_onSlideEnd","_onFocus","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","_getDirection","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","_clamp","step","pos","offset","vertical","top","size","posComponent","percent","_shouldInvertMouseCoords","exactValue","_calculateValue","closestValue","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_tickIntervalPercent","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","options","_blurHostElement","blur","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","thumbLabel","displayWith","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","HandsetPortrait","detachments","overlayElement","matches","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","openedVia","_opened","isOpen","_enableAnimations","_openedVia","_restoreFocus","_updateFocusTrapState","MatDrawer","_focusTrap","enabled","_isFocusTrapEnabled","matDrawerAnimations","transformDrawer","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-drawer-opened]","mode","HostBinding","openedChange","_openedStream","openedStart","_closedStream","closedStart","onPositionChanged","opened","_animationStartListener","HostListener","_animationDoneListener","backdropClick","_doCheckSubject","_validateDrawers","updateContentMargins","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","drawer","_drawers","_isDrawerOpen","_start","_end","debounceTime","_contentMarginChanges","close","_left","_width","_right","_contentMargins","ngDoCheck","_setContainerClass","className","throwMatDuplicatedDrawerError","_onBackdropClicked","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_onChange","_","_onTouched","_uniqueId","_required","_checked","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_onInputClick","toggle","_onLabelTextChange","[id]","[attr.tabindex]","[attr.aria-labelledby]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","NG_VALIDATORS","MatSlideToggleRequiredValidator","CheckboxRequiredValidator","_MatSlideToggleRequiredValidatorModule","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","_isMinValue","axis","scale","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMousedown","button","MatProgressSpinner","_diameter","BASE_SIZE","_fallbackAnimation","trackedDiameters","_diameters","head","Set","_noopAnimations","_forceAnimations","diameter","strokeWidth","_styleRoot","_attachStyleNode","_strokeWidth","newValue","_getShadowRoot","animationClass","viewBox","_circleRadius","PI","_strokeCircumference","styleRoot","currentDiameter","diameters","diametersForElement","styleTag","createElement","setAttribute","_getAnimationText","appendChild","INDETERMINATE_ANIMATION_TEMPLATE","replace","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_DEFAULT_OPTIONS","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_providerOverride","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_color","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.aria-label]","[attr.aria-describedby]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_trapFocus","_animationEnd","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","destroy","_animationStarted","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanelWrap","transformPanel","MatFormFieldControl","MatSelect","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","overlayDir","CdkConnectedOverlay","MatOption","optionGroups","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","multiple","disableOptionCentering","compareWith","errorStateMatcher","typeaheadDebounceInterval","sortComparator","selectionChange","MatSelectModule","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(longpress)","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","Handset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","_emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","_MatMenu","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_setIsMenuOpen","parentMenu","_setMenuElevation","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MatMenuItem","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuContent","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","switchMap","option","onSelectionChange","onStable","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","panelOpen","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","withTypeAhead","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","find","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","MatListOption","_handleBlur","selectionList","_hasFocus","_setSelected","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_setOptionsFromValues","_i","item","disableRippleChanges","colorChanges","firstChange","_isDestroyed","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_MatMenuBase","_xPosition","_yPosition","_directDescendantItems","QueryList","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","_updateDirectDescendants","_item","setFocusOrigin","parentElement","getAttribute","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","_allItems","reset","notifyOnChanges","defaultOptions","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_containsFocus","accordion","_handleHeaderFocus","expandedHeight","collapsedHeight","MatExpansionPanelHeader","_animationsDisabled","_toggle","_isExpanded","expanded","_getExpandedState","_getPanelId","_getTogglePosition","togglePosition","_showToggle","hideToggle","_keydown","_handleHeaderKeydown","_parentChangeSubscription","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","[attr.aria-controls]","[class.mat-expanded]","[class.mat-expansion-toggle-indicator-after]","[class.mat-expansion-toggle-indicator-before]","[@.disabled]","(@expansionHeight.start)","[@expansionHeight]","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_hideToggle","displayMode","_headers","header","MAT_ACCORDION","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_errorHandler","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","handleError","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","attributes","name_1","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ErrorHandler","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","namespace_1","iconName_1","_setSvgElement","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","match","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatCalendar","MatDatepickerIntl","headerComponent","startAt","minDate","maxDate","dateFilter","dateClass","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","_setColor","_createPopup","datepicker","getConnectedOverlayOrigin","componentInstance","MatDialog","DateAdapter","calendarHeaderComponent","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","params","bodyExpansion","uniqueId","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_togglePosition","_hasSpacing","_lazyContent","_body","focusedElement","bodyElement","useValue","[class.mat-expansion-panel-spacing]","accordionHideToggleChange","[required]","[attr.readonly]","MatInput","AutofillMonitor","readonly","_MatInputMixinBase","MatInputModule","MatTextareaAutosize","TextFieldModule","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","MatCalendarCell","displayValue","cssClasses","numCols","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","columnChanges","rows","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","_focusActiveCell","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_initWeekdays","_createWeekCells","_matCalendarBody","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","daysInMonth","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","yearsPerPage","isSameMultiYearView","_selectedYear","_todayYear","activeYear","minYearOfPage","getActiveOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","multi-year","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","MatChipList","_clearSelection","chips","chip","correspondingChip","selectViaInteraction","skip","MatChipListChange","_blur","_hasFocusedChip","_chipInput","focused","_markAsTouched","_allowFocusEscape","_userTabIndex","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","_lastDestroyedChipIndex","_originatesFromChip","currentElement","_syncChipsState","_chipListMultiple","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","TAB","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_closeFallbackTimeout","_result","dialogResult","detachBackdrop","totalTime","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","getState","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","splice","overlayContainer","getContainerElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","[attr.type]","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","minRows","maxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","coercedValue","_dispatchSelectionChange","tagName","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","parentChip","MatChipListBase","_MatChipListMixinBase","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","newChipIndex","MatBottomSheet","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","MatButton","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","_origin","attribute","MatAnchor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","deferEvents","_updateModelValue","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","[attr.name]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_supportsShadowDom","rootNode","getRootNode","_isInsideShadowRoot","ShadowRoot","_positionStrategy","_setStrategyPositions","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","composedPath","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","withPush","belowPosition","abovePosition","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","getBadgeElement","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","[class.mat-optgroup-disabled]","_parent","_active","_mostRecentViewValue","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","year1","dateAdapter","year2","startingYear","getStartingYear","exp","parentRegistry","httpClient","sanitizer","errorHandler","pathname","search","scrollThrottle","parentIntl","createShadowRoot","attachShadow","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","sanityChecks","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_sanityChecks","_checkDoctypeIsDefined","_checkThemeIsPresent","_checkCdkVersionMatch","_checksAreEnabled","_isTestEnv","__karma__","jasmine","doctype","theme","body","testElement","computedStyle","version","full","CDK_VERSION","_checkHammerIsAvailable","hammer","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","ignoreMouseEventsTimeout","passiveEventOptions","_target","elementOrElementRef","_isPointerDown","_triggerEvents","_activeRipples","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","_onTouchStart","touches","changedTouches","_onPointerUp","terminateOnPointerUp","persistent","_containerElement","coerceElement","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter"],"mappings":"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"}
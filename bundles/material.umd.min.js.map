{"version":3,"file":"material.umd.min.js","sources":["../../src/material/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/material/tabs/tabs-module.ts","../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar-module.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/outlet.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/tree-module.ts","../../src/material/tree/data-source/flat-data-source.ts","../../src/material/tree/data-source/nested-data-source.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/core/month-constants.ts","../../src/material/datepicker/multi-year-view.ts","../../src/material/expansion/expansion-animations.ts","../../src/material/select/select.ts","../../src/material/tooltip/tooltip.ts","../../src/material/table/table-data-source.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab-label.ts","../../src/material/tabs/tab.ts","../../src/material/tabs/tabs-animations.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/paginated-tab-header.ts","../../src/material/tabs/tab-header.ts","../../src/material/tabs/tab-group.ts","../../src/material/sort/sort-header.ts","../../src/material/sort/sort-module.ts","../../src/material/stepper/step-label.ts","../../src/material/stepper/stepper-intl.ts","../../src/material/stepper/step-header.ts","../../src/material/stepper/stepper-animations.ts","../../src/material/stepper/stepper-icon.ts","../../src/material/stepper/stepper.ts","../../src/material/stepper/stepper-button.ts","../../src/material/stepper/stepper-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/text-column.ts","../../src/material/table/table-module.ts","../../src/material/slider/slider.ts","../../src/material/slider/slider-module.ts","../../src/material/snack-bar/snack-bar-ref.ts","../../src/material/snack-bar/snack-bar-config.ts","../../src/material/snack-bar/simple-snack-bar.ts","../../src/material/snack-bar/snack-bar-animations.ts","../../src/material/snack-bar/snack-bar-container.ts","../../src/material/snack-bar/snack-bar-module.ts","../../src/material/snack-bar/snack-bar.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-animations.ts","../../src/material/sort/sort-header-intl.ts","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts","../../src/material/slide-toggle/slide-toggle-config.ts","../../src/material/slide-toggle/slide-toggle.ts","../../src/material/slide-toggle/slide-toggle-required-validator.ts","../../src/material/slide-toggle/slide-toggle-module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner-module.ts","../../src/material/radio/radio.ts","../../src/material/radio/radio-module.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/select/select-module.ts","../../src/material/tooltip/tooltip-animations.ts","../../src/material/tooltip/tooltip-module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.ts","../../src/material/paginator/paginator-module.ts","../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar-module.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-module.ts","../../src/material/select/select-animations.ts","../../src/material/list/selection-list.ts","../../src/material/list/list-module.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/list/list.ts","../../src/material/expansion/expansion-panel-header.ts","../../src/material/expansion/accordion.ts","../../src/material/expansion/expansion-module.ts","../../src/material/grid-list/grid-list-base.ts","../../src/material/grid-list/grid-tile.ts","../../src/material/grid-list/tile-coordinator.ts","../../src/material/grid-list/tile-styler.ts","../../src/material/grid-list/grid-list.ts","../../src/material/grid-list/grid-list-module.ts","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts","../../src/material/datepicker/calendar.ts","../../src/material/datepicker/datepicker-animations.ts","../../src/material/datepicker/datepicker.ts","../../src/material/datepicker/datepicker-input.ts","../../src/material/datepicker/datepicker-toggle.ts","../../src/material/datepicker/datepicker-module.ts","../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/input/input.ts","../../src/material/input/input-module.ts","../../src/material/datepicker/datepicker-intl.ts","../../src/material/datepicker/calendar-body.ts","../../src/material/datepicker/month-view.ts","../../src/material/datepicker/year-view.ts","../../src/material/chips/chip-list.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/chips-module.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-animations.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","../../src/material/dialog/dialog-module.ts","../../src/material/input/autosize.ts","../../src/material/input/input-value-accessor.ts","../../src/material/card/card.ts","../../src/material/card/card-module.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox-required-validator.ts","../../src/material/checkbox/checkbox-module.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-default-options.ts","../../src/material/button/button.ts","../../src/material/button/button-module.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle-module.ts","../../src/material/form-field/form-field.ts","../../src/material/form-field/form-field-module.ts","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts","../../src/material/badge/badge.ts","../../src/material/badge/badge-module.ts","../../src/material/bottom-sheet/bottom-sheet-config.ts","../../src/material/bottom-sheet/bottom-sheet-animations.ts","../../src/material/bottom-sheet/bottom-sheet-container.ts","../../src/material/bottom-sheet/bottom-sheet-module.ts","../../src/material/bottom-sheet/bottom-sheet-ref.ts","../../src/material/bottom-sheet/bottom-sheet.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/core/label/label-options.ts","../../src/material/form-field/error.ts","../../src/material/form-field/form-field-animations.ts","../../src/material/form-field/form-field-control.ts","../../src/material/form-field/hint.ts","../../src/material/form-field/label.ts","../../src/material/form-field/placeholder.ts","../../src/material/form-field/prefix.ts","../../src/material/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/material/core/common-behaviors/common-module.ts","../../src/material/core/common-behaviors/disabled.ts","../../src/material/core/common-behaviors/color.ts","../../src/material/core/common-behaviors/disable-ripple.ts","../../src/material/core/common-behaviors/tabindex.ts","../../src/material/core/common-behaviors/error-state.ts","../../src/material/core/common-behaviors/initialized.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/line/line.ts","../../src/material/core/ripple/ripple-renderer.ts","../../src/material/form-field/form-field-errors.ts","../../src/material/input/input-errors.ts","../../src/material/datepicker/datepicker-errors.ts","../../src/material/menu/menu-errors.ts","../../src/material/select/select-errors.ts","../../src/material/sort/sort-errors.ts","../../src/material/core/version.ts","../../src/material/core/animation/animation.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/core/error/error-options.ts","../../src/material/core/gestures/gesture-config.ts","../../src/material/core/ripple/ripple-ref.ts","../../src/material/core/ripple/ripple.ts","../../src/material/core/ripple/index.ts","../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/material/core/selection/index.ts","../../src/material/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusMonitor, FocusableOption} from '@angular/cdk/a11y';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MatInkBar} from '../ink-bar';\nimport {MatPaginatedTabHeader} from '../paginated-tab-header';\n\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {\n    'class': 'mat-tab-nav-bar mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n    '[class.mat-primary]': 'color !== \"warn\" && color !== \"accent\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends MatPaginatedTabHeader implements AfterContentChecked,\n  AfterContentInit, OnDestroy {\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true}) _items: QueryList<MatTabLink>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const classList = this._elementRef.nativeElement.classList;\n    classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n  private _disableRipple: boolean = false;\n\n  /** Theme color of the nav bar. */\n  @Input() color: ThemePalette = 'primary';\n\n  constructor(elementRef: ElementRef,\n              @Optional() dir: Directionality,\n              ngZone: NgZone,\n              changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              /**\n               * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\n               */\n              @Optional() platform?: Platform,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected() {\n    // noop\n  }\n\n  ngAfterContentInit() {\n    this.updateActiveLink();\n    super.ngAfterContentInit();\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(_element?: ElementRef) {\n    if (!this._items) {\n      return;\n    }\n\n    const items = this._items.toArray();\n\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].active) {\n        this.selectedIndex = i;\n        this._changeDetectorRef.markForCheck();\n        return;\n      }\n    }\n\n    // The ink bar should hide itself if no items are active.\n    this.selectedIndex = -1;\n    this._inkBar.hide();\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkBase {}\nconst _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active ? \"page\" : null',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase implements OnDestroy, CanDisable,\n  CanDisableRipple, HasTabIndex, RippleTarget, FocusableOption {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this.elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: MatTabNav, public elementRef: ElementRef, ngZone: NgZone,\n      platform: Platform,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (animationMode === 'NoopAnimations') {\n      this.rippleConfig.animation = {enterDuration: 0, exitDuration: 0};\n    }\n\n    _focusMonitor.monitor(elementRef);\n  }\n\n  focus() {\n    this.elementRef.nativeElement.focus();\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n    this._focusMonitor.stopMonitoring(this.elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends CdkNestedTreeNode<T> implements AfterContentInit,\n  OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** Whether the node is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  /** Tabindex for the node. */\n  @Input()\n  get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  private _tabIndex: number;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]',\n  providers: [{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }]\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ConnectedPosition,\n} from '@angular/cdk/overlay';\nimport {_supportsShadowDom} from '@angular/cdk/platform';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {defer, fromEvent, merge, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {delay, filter, map, switchMap, take, tap} from 'rxjs/operators';\n\nimport {MatAutocomplete} from './autocomplete';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, AfterViewInit, OnChanges,\n  OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Whether the element is inside of a ShadowRoot component. */\n  private _isInsideShadowRoot: boolean;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n   * will render the panel underneath the trigger if there is enough space for it to fit in\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n   * whether it fits completely in the viewport.\n   */\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterViewInit() {\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n\n      if (_supportsShadowDom()) {\n        const element = this._element.nativeElement;\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n        // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n        // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n        this._isInsideShadowRoot = rootNode instanceof (window as any).ShadowRoot;\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef!.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n               fromEvent(this._document, 'click') as Observable<MouseEvent>,\n               fromEvent(this._document, 'touchend') as Observable<TouchEvent>)\n        .pipe(filter(event => {\n          // If we're in the Shadow DOM the event target will be the shadow root so we have to fall\n          // back to check the first element in the path of the click event.\n          const clickTarget =\n              (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                                                                event.target) as HTMLElement;\n          const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n\n          return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n        .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n              const wasOpen = this.panelOpen;\n              this._resetActiveItem();\n              this.autocomplete._setVisibility();\n\n              if (this.panelOpen) {\n                this._overlayRef!.updatePosition();\n\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                  this.autocomplete.opened.emit();\n                }\n              }\n\n              return this.panelClosingActions;\n            }),\n            // when the first closing event occurs...\n            take(1))\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n\n          // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false);\n\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const belowPosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    };\n    const abovePosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    };\n\n    let positions: ConnectedPosition[];\n\n    if (this.position === 'above') {\n      positions = [abovePosition];\n    } else if (this.position === 'below') {\n      positions = [belowPosition];\n    } else {\n      positions = [belowPosition, abovePosition];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (!isSameMultiYearView(\n      this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n\n    // We want a range years such that we maximize the number of\n    // enabled dates visible at once. This prevents issues where the minimum year\n    // is the last item of a page OR the maximum year is the first item of a page.\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view.\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(minYearOfPage + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          yearsPerPage - getActiveOffset(\n            this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n\nexport function isSameMultiYearView<D>(\n  dateAdapter: DateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean {\n  const year1 = dateAdapter.getYear(date1);\n  const year2 = dateAdapter.getYear(date2);\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) ===\n          Math.floor((year2 - startingYear) / yearsPerPage);\n}\n\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nexport function getActiveOffset<D>(\n  dateAdapter: DateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number {\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)),\n    yearsPerPage);\n}\n\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear<D>(\n  dateAdapter: DateAdapter<D>, minDate: D | null, maxDate: D | null): number {\n  let startingYear = 0;\n  if (maxDate) {\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo (a: number, b: number): number {\n  return (a % b + b) % b;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  @Input() typeaheadDebounceInterval: number;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead(this.typeaheadDebounceInterval)\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE && !hasModifierKey(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone, Optional} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {}\nconst _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {}\nconst _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectorRef,\n  ElementRef,\n  NgZone,\n  Optional,\n  QueryList,\n  EventEmitter,\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  OnDestroy,\n} from '@angular/core';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {FocusKeyManager, FocusableOption} from '@angular/cdk/a11y';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n/** Item inside a paginated tab header. */\ntype MatPaginatedTabHeaderItem = FocusableOption & {elementRef: ElementRef};\n\n/**\n * Base class for a tab header that supported pagination.\n */\nexport abstract class MatPaginatedTabHeader implements AfterContentChecked, AfterContentInit,\n  AfterViewInit, OnDestroy {\n  abstract _items: QueryList<MatPaginatedTabHeaderItem>;\n  abstract _inkBar: MatInkBar;\n  abstract _tabListContainer: ElementRef<HTMLElement>;\n  abstract _tabList: ElementRef<HTMLElement>;\n  abstract _nextPaginator: ElementRef<HTMLElement>;\n  abstract _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatPaginatedTabHeaderItem>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n\n    if (this._selectedIndex != value) {\n      this._selectedIndexChanged = true;\n      this._selectedIndex = value;\n\n      if (this._keyManager) {\n        this._keyManager.updateActiveItemIndex(value);\n      }\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              /**\n               * @deprecated @breaking-change 9.0.0 `_platform` and `_animationMode`\n               * parameters to become required.\n               */\n              private _platform?: Platform,\n              public _animationMode?: string) {\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  /** Called when the user has selected an item via the keyboard. */\n  protected abstract _itemSelected(event: KeyboardEvent): void;\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager<MatPaginatedTabHeaderItem>(this._items)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize, this._items.changes).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._items.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._items.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        this._itemSelected(event);\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent || '';\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._items) { return true; }\n\n    const tab = this._items ? this._items.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._items && this._items.length) {\n      this._items.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 9.0.0 Remove null check for `platform` after it can no longer be undefined.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    const {offsetLeft, offsetWidth} = selectedLabel.elementRef.nativeElement;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = offsetLeft;\n      labelAfterPos = labelBeforePos + offsetWidth;\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - offsetLeft;\n      labelBeforePos = labelAfterPos - offsetWidth;\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedItem = this._items && this._items.length ?\n        this._items.toArray()[this.selectedIndex] : null;\n    const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n\n    if (selectedLabelWrapper) {\n      this._inkBar.alignToElement(selectedLabelWrapper);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n  Input,\n  Inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {Platform} from '@angular/cdk/platform';\nimport {MatPaginatedTabHeader} from './paginated-tab-header';\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['selectedIndex'],\n  outputs: ['selectFocusedIndex', 'indexFocused'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends MatPaginatedTabHeader implements AfterContentChecked,\n  AfterContentInit, AfterViewInit, OnDestroy {\n\n  @ContentChildren(MatTabLabelWrapper) _items: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Optional() dir: Directionality,\n              ngZone: NgZone,\n              platform: Platform,\n              // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected(event: KeyboardEvent) {\n    event.preventDefault();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken<MatTabsConfig>('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the step header. */\n  focus() {\n    this._focusMonitor.focusVia(this._elementRef, 'program');\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus(options?: FocusOptions) {\n    this._focusHostElement(options);\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement(options?: FocusOptions) {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject<void>();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => {\n              return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n            event.preventDefault();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this.updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        const width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        const width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n@Directive({\n  selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n  providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n})\nexport class MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\nimport {MatSlideToggleRequiredValidator} from './slide-toggle-required-validator';\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n@NgModule({\n  exports: [MatSlideToggleRequiredValidator],\n  declarations: [MatSlideToggleRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatSlideToggleRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatRippleModule,\n    MatCommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatSlideToggle,\n    MatCommonModule\n  ],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n  private _diameter = BASE_SIZE;\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation) {\n      const trackedDiameters = MatProgressSpinner._diameters;\n      const diametersForElement = trackedDiameters.get(this._styleRoot);\n\n      if (!diametersForElement || !diametersForElement.has(this._diameter)) {\n        this._attachStyleNode();\n      }\n    }\n  }\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._styleRoot = _getShadowRoot(_elementRef.nativeElement, _document) || _document.head;\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleTag: HTMLStyleElement = this._document.createElement('style');\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n    styleTag.textContent = this._getAnimationText();\n    styleRoot.appendChild(styleTag);\n\n    if (!diametersForElement) {\n      diametersForElement = new Set<number>();\n      diameters.set(styleRoot, diametersForElement);\n    }\n\n    diametersForElement.add(currentDiameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement, _document: Document): Node | null {\n  // TODO(crisbeto): see whether we should move this into the CDK\n  // feature detection utilities once #15616 gets merged in.\n  if (typeof window !== 'undefined') {\n    const head = _document.head;\n\n    // Check whether the browser supports Shadow DOM.\n    if (head && ((head as any).createShadowRoot || head.attachShadow)) {\n      const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n      // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n      if (rootNode instanceof (window as any).ShadowRoot) {\n        return rootNode;\n      }\n    }\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nexport interface MatRadioDefaultOptions {\n  color: ThemePalette;\n}\n\nexport const MAT_RADIO_DEFAULT_OPTIONS =\n  new InjectionToken<MatRadioDefaultOptions>('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions {\n  return {\n    color: 'accent'\n  };\n}\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n      (this.radioGroup && this.radioGroup.color) ||\n      this._providerOverride && this._providerOverride.color || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n                @Optional() @Inject(MAT_RADIO_DEFAULT_OPTIONS)\n                private _providerOverride?: MatRadioDefaultOptions) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this._emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n    return undefined;\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this._emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private _emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n/** Base class with all of the `MatMenu` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** All items inside the menu. Includes items nested inside another menu. */\n  @ContentChildren(MatMenuItem, {descendants: true}) _allItems: QueryList<MatMenuItem>;\n\n  /** Only the direct descendant menu items. */\n  private _directDescendantItems = new QueryList<MatMenuItem>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n    this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._directDescendantItems.destroy();\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    const itemChanges = this._directDescendantItems.changes as Observable<QueryList<MatMenuItem>>;\n    return itemChanges.pipe(\n      startWith(this._directDescendantItems),\n      switchMap(items => merge(...items.map((item: MatMenuItem) => item._hovered)))\n    );\n  }\n\n  /*\n   * Registers a menu item with the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  addItem(_item: MatMenuItem) {}\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  removeItem(_item: MatMenuItem) {}\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   */\n  private _updateDirectDescendants() {\n    this._allItems.changes\n      .pipe(startWith(this._allItems))\n      .subscribe((items: QueryList<MatMenuItem>) => {\n        this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n        this._directDescendantItems.notifyOnChanges();\n      });\n  }\n}\n\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n/** @docs-public MatMenu */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenu extends MatMenu {\n\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'class': 'mat-menu-trigger',\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe({\n            next: () => menu.lazyContent!.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._resetMenu()\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {_MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    const list = this.selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements CanDisableRipple,\n  AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.onChange.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus(options?: FocusOptions) {\n    this._element.nativeElement.focus(options);\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DomPortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ChangeDetectorRef,\n  ComponentFactoryResolver,\n  Directive,\n  Inject,\n  Injector,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any,\n    private _changeDetectorRef?: ChangeDetectorRef) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n\n    // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n    // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n    // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n    // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n    // @breaking-change 9.0.0 Make change detector ref required\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  addItem?: (item: T) => void;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() public _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\nimport {MatAccordionTogglePosition} from './accordion-base';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@.disabled]': '_animationsDisabled',\n    '(@expansionHeight.start)': '_animationStarted()',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  /** Whether Angular animations in the panel header should be disabled. */\n  _animationsDisabled = true;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  _animationStarted() {\n    // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n    // there to work around a bug in Angular (see #13088), however this introduces a different\n    // issue. The new transition will cause the header to animate in on init (see #16067), if the\n    // consumer has set a header height that is different from the default one. We work around it\n    // by disabling animations on the header and re-enabling them after the first animation has run.\n    // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n    // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n    // for https://github.com/angular/angular/issues/18847 to be resolved.\n    this._animationsDisabled = false;\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    this._focusMonitor.focusVia(this._element, origin, options);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n/** Options that can be used to configure how an icon or the icons in an icon set are presented. */\nexport interface IconOptions {\n  /** View box to set on the icon. */\n  viewBox?: string;\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl, options?: IconOptions);\n  constructor(svgElement: SVGElement, options?: IconOptions);\n  constructor(data: SafeResourceUrl | SVGElement, public options?: IconOptions) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconInNamespace('', iconName, url, options);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl,\n                        options?: IconOptions): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml,\n                               options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral, options);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconSetInNamespace('', url, options);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal, options);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml,\n                                  options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText, config.options)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string, options?: IconOptions): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg, options);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string,\n                                 options?: IconOptions): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement, options);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg, options);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement, options?: IconOptions): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n    if (options && options.viewBox) {\n      svg.setAttribute('viewBox', options.viewBox);\n    }\n\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {\n  getActiveOffset,\n  isSameMultiYearView,\n  MatMultiYearView,\n  yearsPerPage\n} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view, and the last year is\n    // just yearsPerPage - 1 away.\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n    return `${minYearOfPage} \\u2013 ${maxYearOfPage}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.close();\n    });\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    'aria-haspopup': 'dialog',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionTogglePosition} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._initWeekdays();\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Initializes the weekdays. */\n  private _initWeekdays() {\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n        return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(options?: FocusOptions): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput(options?: FocusOptions) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._inputElement.focus(options);\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, ComponentFactoryResolver} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Alternate `ComponentFactoryResolver` to use when resolving the associated component. */\n  componentFactoryResolver?: ComponentFactoryResolver;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    const element = this._elementRef.nativeElement;\n\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n\n    // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      const activeElement = this._document.activeElement;\n\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the dialog already, because it's possible that the consumer\n      // turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }))\n      .subscribe(event => {\n        event.preventDefault();\n        this.close();\n      });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n\n      // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n      this._closeFallbackTimeout = setTimeout(() => {\n        this._overlayRef.dispose();\n      }, event.totalTime + 100);\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal = new ComponentPortal(MatDialogContainer,\n        config.viewContainerRef, injector, config.componentFactoryResolver);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-card',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  }\n})\nexport class MatCard {\n  // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {}\n}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple,\n    FocusableOption {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin: FocusOrigin = 'keyboard', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, origin, options);\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              // @breaking-change 8.0.0 `animationMode` parameter to become required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple, FocusableOption {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (this._getHostElement() as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatButton` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    this._getHostElement().focus(options);\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle,\n                    select: boolean,\n                    isUserInput = false,\n                    deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (this._selectionModel) {\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      }\n    } else {\n      deferEvents = true;\n    }\n\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve(() => this._updateModelValue(isUserInput));\n    } else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel && this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n\n  /** Syncs up the group's value with the model and emits the change event. */\n  private _updateModelValue(isUserInput: boolean) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.name]': 'null',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n\n  /** Focuses the button. */\n  focus(options?: FocusOptions): void {\n    this._buttonElement.nativeElement.focus(options);\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n  hideRequiredMarker?: boolean;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\n  @ViewChild('label', {static: false}) private _label: ElementRef;\n\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  get _labelChild() {\n    return this._labelChildNonStatic || this._labelChildStatic;\n  }\n\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n    this._hideRequiredMarker = (_defaults && _defaults.hideRequiredMarker != null) ?\n        _defaults.hideRequiredMarker : false;\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  isDevMode,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n\n      if (isDevMode()) {\n        const nativeElement = _elementRef.nativeElement;\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\nimport {InjectionToken, ViewContainerRef} from '@angular/core';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the bottom sheet. */\n  scrollStrategy?: ScrollStrategy;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    const element = this._elementRef.nativeElement;\n\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      const activeElement = this._document.activeElement;\n\n      // Otherwise ensure that focus is on the container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the bottom sheet already, because it's possible that the\n      // consumer turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          clearTimeout(this._closeFallbackTimeout);\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(event => {\n      if (!this.disableClose &&\n        (event.type !== 'keydown' || !hasModifierKey(event as KeyboardEvent))) {\n        event.preventDefault();\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(event => {\n        // The logic that disposes of the overlay depends on the exit animation completing, however\n        // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n        // timeout which will clean everything up if the animation hasn't fired within the specified\n        // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n        // vast majority of cases the timeout will have been cleared before it has fired.\n        this._closeFallbackTimeout = setTimeout(() => {\n          this._overlayRef.dispose();\n        }, event.totalTime + 100);\n\n        this._overlayRef.detachBackdrop();\n      });\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: config.scrollStrategy || this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FocusOptions, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements FocusableOption, AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus(options);\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode, Version} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {VERSION as CDK_VERSION} from '@angular/cdk';\n\n// Private version constant to circumvent test/build issues,\n// i.e. avoid core to depend on the @angular/material primary entry-point\n// Can be removed once the Material primary entry-point no longer\n// re-exports all secondary entry-points\nconst VERSION = new Version('8.1.3-02a3f3e57');\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._checkCdkVersionMatch();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether the material version matches the cdk version */\n  private _checkCdkVersionMatch(): void {\n    if (VERSION.full !== CDK_VERSION.full) {\n      console.warn(\n          'The Angular Material version (' + VERSION.full + ') does not match ' +\n          'the Angular CDK version (' + CDK_VERSION.full + ').\\n' +\n          'Please ensure the versions of these two packages exactly match.'\n      );\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this._onMousedown)\n        .set('mouseup', this._onPointerUp)\n        .set('mouseleave', this._onPointerUp)\n\n        .set('touchstart', this._onTouchStart)\n        .set('touchend', this._onPointerUp)\n        .set('touchcancel', this._onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this._runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this._runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private _runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.1.3-02a3f3e57');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase { }\nconst _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["this","_items","items","toArray","i","length","active","selectedIndex","_changeDetectorRef","markForCheck","_inkBar","hide","type","Component","args","selector","exportAs","inputs","template","styles","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","Platform","decorators","Optional","String","Inject","ANIMATION_MODULE_TYPE","MatTabNav","propDecorators","_tabListContainer","ViewChild","static","_tabList","_nextPaginator","_previousPaginator","backgroundColor","Input","disableRipple","color","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","MatTabLink","_tabNavBar","elementRef","ngZone","platform","globalRippleOptions","tabIndex","_focusMonitor","animationMode","_this","_super","call","_tabLinkRipple","setupTriggerEvents","nativeElement","rippleConfig","parseInt","animation","enterDuration","exitDuration","monitor","get","_isActive","value","updateActiveLink","enumerable","configurable","disabled","stopMonitoring","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","FocusMonitor","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatToolbarBase","_elementRef","_MatToolbarMixinBase","mixinColor","MatToolbarRow","MatToolbar","_platform","document","_document","tslib_1.__extends","prototype","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","Array","from","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","_MatTreeNodeMixinBase","CdkTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","_disabled","Object","defineProperty","coerceBooleanProperty","_tabIndex","ngAfterContentInit","ngOnDestroy","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","IterableDiffers","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTreeNodeOutlet","viewContainer","_node","CdkTreeNodeOutlet","ViewContainerRef","MatTree","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","CdkTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","pipe","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","_sort","sort","_updateChangeSubscription","MatTableDataSource","_paginator","paginator","sortChange","initialized","observableOf","pageChange","page","_internalPageChanges","dataStream","filteredData","combineLatest","_filter","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","_renderChangesSubscription","unsubscribe","_renderData","obj","filterPredicate","_updatePaginator","sortData","startIndex","pageIndex","pageSize","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_ngZone","_inkBarPositioner","_animationMode","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","positions","inkBar","left","width","[class._mat-animation-noopable]","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","distinctUntilChanged","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatPaginatedTabHeader","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","fromEvent","takeUntil","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","_handlePaginatorPress","dirChange","resize","realign","updatePagination","_alignInkBarToSelectedTab","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","newFocusIndex","_setTabFocus","ngAfterContentChecked","_tabLabelCount","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","_itemSelected","onKeydown","_onContentChanges","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","containerEl","scrollLeft","scrollWidth","scrollDistance","translateX","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedItem","selectedLabelWrapper","timer","maxScrollDistance","distance","max","Directionality","viewportRuler","_disableRipple","outputs","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","MatTabGroupBase","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","_animationDuration","test","_backgroundColor","remove","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_element","viewState","_isSorted","_arrowDirection","_setAnimationTransitionState","_showIndicatorHint","MatSortHeader","id","_getArrowDirectionState","_getArrowViewState","_viewState","_updateArrowDirection","start","_isDisabled","_getAriaSortAttribute","_renderArrow","(click)","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","disableClear","MatSortModule","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","CdkStepper","ContentChildren","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","a","b","valueA","valueB","comparatorResult","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","MatSlider","vertical","_getDirection","_invertAxis","percent","_shouldInvertMouseCoords","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_isSliding","_focusHostElement","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","_clamp","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_tickIntervalPercent","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","options","_blurHostElement","blur","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","thumbLabel","displayWith","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","_columnDef","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_setIndicatorHintVisible","visible","MatDrawer","matDrawerAnimations","transformDrawer","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-drawer-opened]","mode","HostBinding","openedChange","_openedStream","openedStart","_closedStream","closedStart","onPositionChanged","opened","_animationStartListener","HostListener","_animationDoneListener","backdropClick","_doCheckSubject","_validateDrawers","updateContentMargins","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","drawer","_drawers","_isDrawerOpen","_start","_end","debounceTime","_contentMarginChanges","close","_left","_width","_right","_contentMargins","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_onBackdropClicked","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_onChange","_","_onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_onInputClick","toggle","_getDragPercentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","NG_VALIDATORS","MatSlideToggleRequiredValidator","CheckboxRequiredValidator","_MatSlideToggleRequiredValidatorModule","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","_isMinValue","axis","scale","_thumbGap","tickSize","backgroundSize","sign","rotate","MatProgressSpinner","_diameter","BASE_SIZE","_fallbackAnimation","trackedDiameters","_diameters","head","Set","_styleRoot","_getShadowRoot","_noopAnimations","_forceAnimations","diameter","strokeWidth","animationClass","diametersForElement","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","styleRoot","currentDiameter","diameters","setAttribute","_getAnimationText","appendChild","INDETERMINATE_ANIMATION_TEMPLATE","replace","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_DEFAULT_OPTIONS","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_providerOverride","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_color","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","_animationEnd","_opened","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanelWrap","transformPanel","MatFormFieldControl","MatSelect","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","overlayDir","CdkConnectedOverlay","MatOption","optionGroups","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","multiple","disableOptionCentering","compareWith","errorStateMatcher","typeaheadDebounceInterval","sortComparator","selectionChange","MatSelectModule","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","_emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","_MatMenu","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MatMenuItem","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuContent","MatMenuModule","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","switchMap","option","onSelectionChange","onStable","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","panelOpen","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","withTypeAhead","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","find","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","MatListOption","_handleBlur","selectionList","_hasFocus","_setSelected","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_setOptionsFromValues","_i","item","disableRippleChanges","colorChanges","firstChange","_isDestroyed","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_MatMenuBase","_xPosition","_yPosition","_directDescendantItems","QueryList","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","_updateDirectDescendants","_item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","_allItems","reset","notifyOnChanges","defaultOptions","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_containsFocus","accordion","_handleHeaderFocus","expandedHeight","collapsedHeight","MatExpansionPanelHeader","_animationsDisabled","_toggle","_isExpanded","expanded","_getExpandedState","_getPanelId","_getTogglePosition","togglePosition","_showToggle","hideToggle","_keydown","_handleHeaderKeydown","_parentChangeSubscription","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","[attr.aria-controls]","[class.mat-expanded]","[class.mat-expansion-toggle-indicator-after]","[class.mat-expansion-toggle-indicator-before]","[@.disabled]","(@expansionHeight.start)","[@expansionHeight]","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_hideToggle","displayMode","_headers","header","MAT_ACCORDION","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatCalendar","MatDatepickerIntl","headerComponent","startAt","minDate","maxDate","dateFilter","dateClass","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","_setColor","_createPopup","datepicker","getConnectedOverlayOrigin","componentInstance","MatDialog","DateAdapter","calendarHeaderComponent","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","params","bodyExpansion","uniqueId","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_togglePosition","_hasSpacing","_lazyContent","_body","focusedElement","bodyElement","useValue","[class.mat-expansion-panel-spacing]","accordionHideToggleChange","MatInput","AutofillMonitor","readonly","_MatInputMixinBase","MatInputModule","MatTextareaAutosize","TextFieldModule","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","MatCalendarCell","displayValue","cssClasses","numCols","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","columnChanges","rows","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","_focusActiveCell","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_initWeekdays","_createWeekCells","_matCalendarBody","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","daysInMonth","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","yearsPerPage","isSameMultiYearView","_selectedYear","_todayYear","activeYear","minYearOfPage","getActiveOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","multi-year","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","correspondingChip","MatChipList","chips","chip","selectViaInteraction","_clearSelection","skip","MatChipListChange","_blur","_hasFocusedChip","_chipInput","focused","_markAsTouched","_allowFocusEscape","_userTabIndex","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","_lastDestroyedChipIndex","_originatesFromChip","currentElement","parentElement","_syncChipsState","_chipListMultiple","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","TAB","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_closeFallbackTimeout","_result","dialogResult","detachBackdrop","totalTime","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","splice","overlayContainer","getContainerElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","minRows","maxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","tagName","_removeTriggerEvents","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","parentChip","MatChipListBase","_MatChipListMixinBase","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","newChipIndex","MatButtonBase","_MatButtonMixinBase","MatButton","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","BUTTON_HOST_ATTRIBUTES","DEFAULT_ROUND_BUTTON_COLOR","_origin","attribute","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","deferEvents","_updateModelValue","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","[attr.name]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_supportsShadowDom","rootNode","getRootNode","_isInsideShadowRoot","ShadowRoot","_positionStrategy","_setStrategyPositions","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","composedPath","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","withPush","belowPosition","abovePosition","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","[attr.aria-haspopup]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","getBadgeElement","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","_parent","_active","_mostRecentViewValue","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","year1","dateAdapter","year2","startingYear","getStartingYear","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","createShadowRoot","attachShadow","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_checkCdkVersionMatch","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","full","CDK_VERSION","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","_onTouchStart","touches","changedTouches","_onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}
{"version":3,"file":"material.umd.min.js","sources":["../../src/material/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/material/tabs/tabs-module.ts","../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar-module.ts","../../src/material/tree/outlet.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/tree-module.ts","../../src/material/tree/data-source/flat-data-source.ts","../../src/material/tree/data-source/nested-data-source.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/core/month-constants.ts","../../src/material/datepicker/multi-year-view.ts","../../src/material/expansion/expansion-animations.ts","../../src/material/select/select.ts","../../src/material/tooltip/tooltip.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab-label.ts","../../src/material/tabs/tab.ts","../../src/material/tabs/tabs-animations.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/tab-header.ts","../../src/material/tabs/tab-group.ts","../../src/material/sort/sort-header.ts","../../src/material/sort/sort-module.ts","../../src/material/stepper/step-label.ts","../../src/material/stepper/stepper-intl.ts","../../src/material/stepper/step-header.ts","../../src/material/stepper/stepper-animations.ts","../../src/material/stepper/stepper-icon.ts","../../src/material/stepper/stepper.ts","../../src/material/stepper/stepper-button.ts","../../src/material/stepper/stepper-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/text-column.ts","../../src/material/table/table-module.ts","../../src/material/table/table-data-source.ts","../../src/material/slider/slider.ts","../../src/material/slider/slider-module.ts","../../src/material/snack-bar/snack-bar-ref.ts","../../src/material/snack-bar/snack-bar-config.ts","../../src/material/snack-bar/simple-snack-bar.ts","../../src/material/snack-bar/snack-bar-animations.ts","../../src/material/snack-bar/snack-bar-container.ts","../../src/material/snack-bar/snack-bar-module.ts","../../src/material/snack-bar/snack-bar.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-animations.ts","../../src/material/sort/sort-header-intl.ts","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts","../../src/material/slide-toggle/slide-toggle-config.ts","../../src/material/slide-toggle/slide-toggle.ts","../../src/material/slide-toggle/slide-toggle-module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner-module.ts","../../src/material/radio/radio.ts","../../src/material/radio/radio-module.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/select/select-module.ts","../../src/material/tooltip/tooltip-animations.ts","../../src/material/tooltip/tooltip-module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.ts","../../src/material/paginator/paginator-module.ts","../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar-module.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-module.ts","../../src/material/select/select-animations.ts","../../src/material/list/selection-list.ts","../../src/material/list/list-module.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/list/list.ts","../../src/material/expansion/expansion-panel-header.ts","../../src/material/expansion/accordion.ts","../../src/material/expansion/expansion-module.ts","../../src/material/grid-list/grid-list-base.ts","../../src/material/grid-list/grid-tile.ts","../../src/material/grid-list/tile-coordinator.ts","../../src/material/grid-list/tile-styler.ts","../../src/material/grid-list/grid-list.ts","../../src/material/grid-list/grid-list-module.ts","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts","../../src/material/datepicker/calendar.ts","../../src/material/datepicker/datepicker-animations.ts","../../src/material/datepicker/datepicker.ts","../../src/material/datepicker/datepicker-input.ts","../../src/material/datepicker/datepicker-toggle.ts","../../src/material/datepicker/datepicker-module.ts","../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/input/input.ts","../../src/material/input/input-module.ts","../../src/material/datepicker/datepicker-intl.ts","../../src/material/datepicker/calendar-body.ts","../../src/material/datepicker/month-view.ts","../../src/material/datepicker/year-view.ts","../../src/material/chips/chip-list.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/chips-module.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-animations.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","../../src/material/dialog/dialog-module.ts","../../src/material/input/autosize.ts","../../src/material/input/input-value-accessor.ts","../../src/material/card/card.ts","../../src/material/card/card-module.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox-required-validator.ts","../../src/material/checkbox/checkbox-module.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-default-options.ts","../../src/material/button/button.ts","../../src/material/button/button-module.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle-module.ts","../../src/material/form-field/form-field.ts","../../src/material/form-field/form-field-module.ts","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts","../../src/material/badge/badge.ts","../../src/material/badge/badge-module.ts","../../src/material/bottom-sheet/bottom-sheet-config.ts","../../src/material/bottom-sheet/bottom-sheet-animations.ts","../../src/material/bottom-sheet/bottom-sheet-container.ts","../../src/material/bottom-sheet/bottom-sheet-module.ts","../../src/material/bottom-sheet/bottom-sheet-ref.ts","../../src/material/bottom-sheet/bottom-sheet.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/core/label/label-options.ts","../../src/material/form-field/error.ts","../../src/material/form-field/form-field-animations.ts","../../src/material/form-field/form-field-control.ts","../../src/material/form-field/hint.ts","../../src/material/form-field/label.ts","../../src/material/form-field/placeholder.ts","../../src/material/form-field/prefix.ts","../../src/material/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/material/core/common-behaviors/common-module.ts","../../src/material/core/common-behaviors/disabled.ts","../../src/material/core/common-behaviors/color.ts","../../src/material/core/common-behaviors/disable-ripple.ts","../../src/material/core/common-behaviors/tabindex.ts","../../src/material/core/common-behaviors/error-state.ts","../../src/material/core/common-behaviors/initialized.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/line/line.ts","../../src/material/core/ripple/ripple-renderer.ts","../../src/material/form-field/form-field-errors.ts","../../src/material/input/input-errors.ts","../../src/material/datepicker/datepicker-errors.ts","../../src/material/menu/menu-errors.ts","../../src/material/select/select-errors.ts","../../src/material/sort/sort-errors.ts","../../src/material/core/version.ts","../../src/material/core/animation/animation.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/core/error/error-options.ts","../../src/material/core/gestures/gesture-config.ts","../../src/material/core/ripple/ripple-ref.ts","../../src/material/core/ripple/ripple.ts","../../src/material/core/ripple/index.ts","../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/material/core/selection/index.ts","../../src/material/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nclass MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkBase {}\nconst _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: MatTabNav, public _elementRef: ElementRef, ngZone: NgZone,\n      platform: Platform,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n    _focusMonitor.monitor(_elementRef);\n\n    if (animationMode === 'NoopAnimations') {\n      this.rippleConfig.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\n\nimport {MatTreeNodeOutlet} from './outlet';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nconst _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** The children node placeholder. */\n  @ContentChildren(MatTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ConnectedPosition,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnChanges, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n   * will render the panel underneath the trigger if there is enough space for it to fit in\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n   * whether it fits completely in the viewport.\n   */\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef!.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n        .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n              const wasOpen = this.panelOpen;\n              this._resetActiveItem();\n              this.autocomplete._setVisibility();\n\n              if (this.panelOpen) {\n                this._overlayRef!.updatePosition();\n\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                  this.autocomplete.opened.emit();\n                }\n              }\n\n              return this.panelClosingActions;\n            }),\n            // when the first closing event occurs...\n            take(1))\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false);\n\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const belowPosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    };\n    const abovePosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    };\n\n    let positions: ConnectedPosition[];\n\n    if (this.position === 'above') {\n      positions = [abovePosition];\n    } else if (this.position === 'below') {\n      positions = [belowPosition];\n    } else {\n      positions = [belowPosition, abovePosition];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (!isSameMultiYearView(\n      this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n\n    // We want a range years such that we maximize the number of\n    // enabled dates visible at once. This prevents issues where the minimum year\n    // is the last item of a page OR the maximum year is the first item of a page.\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view.\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(minYearOfPage + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          yearsPerPage - getActiveOffset(\n            this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n\nexport function isSameMultiYearView<D>(\n  dateAdapter: DateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean {\n  const year1 = dateAdapter.getYear(date1);\n  const year2 = dateAdapter.getYear(date2);\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) ===\n          Math.floor((year2 - startingYear) / yearsPerPage);\n}\n\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nexport function getActiveOffset<D>(\n  dateAdapter: DateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number {\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)),\n    yearsPerPage);\n}\n\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear<D>(\n  dateAdapter: DateAdapter<D>, minDate: D | null, maxDate: D | null): number {\n  let startingYear = 0;\n  if (maxDate) {\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo (a: number, b: number): number {\n  return (a % b + b) % b;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE && !hasModifierKey(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone, Optional} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {}\nconst _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {}\nconst _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  Inject,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nclass MatTabHeaderBase {}\nconst _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _platform: Platform,\n              // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super();\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    if (platform.TRIDENT || platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the step header. */\n  focus() {\n    this._focusMonitor.focusVia(this._elementRef, 'program');\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => {\n              return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n            event.preventDefault();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this.updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        const width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        const width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation) {\n      const trackedDiameters = MatProgressSpinner._diameters;\n      const diametersForElement = trackedDiameters.get(this._styleRoot);\n\n      if (!diametersForElement || !diametersForElement.has(this._diameter)) {\n        this._attachStyleNode();\n      }\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._styleRoot = _getShadowRoot(_elementRef.nativeElement, _document) || _document.head;\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleTag: HTMLStyleElement = this._document.createElement('style');\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n    styleTag.textContent = this._getAnimationText();\n    styleRoot.appendChild(styleTag);\n\n    if (!diametersForElement) {\n      diametersForElement = new Set<number>();\n      diameters.set(styleRoot, diametersForElement);\n    }\n\n    diametersForElement.add(currentDiameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement, _document: Document): Node | null {\n  // TODO(crisbeto): see whether we should move this into the CDK\n  // feature detection utilities once #15616 gets merged in.\n  if (typeof window !== 'undefined') {\n    const head = _document.head;\n\n    // Check whether the browser supports Shadow DOM.\n    if (head && ((head as any).createShadowRoot || head.attachShadow)) {\n      const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n      // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n      if (rootNode instanceof (window as any).ShadowRoot) {\n        return rootNode;\n      }\n    }\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nexport interface MatRadioDefaultOptions {\n  color: ThemePalette;\n}\n\nexport const MAT_RADIO_DEFAULT_OPTIONS =\n  new InjectionToken<MatRadioDefaultOptions>('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions {\n  return {\n    color: 'accent'\n  };\n}\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n      (this.radioGroup && this.radioGroup.color) ||\n      this._providerOverride && this._providerOverride.color || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n                @Optional() @Inject(MAT_RADIO_DEFAULT_OPTIONS)\n                private _providerOverride?: MatRadioDefaultOptions) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this._emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this._emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private _emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n/** Base class with all of the `MatMenu` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n/** @docs-public MatMenu */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenu extends MatMenu {\n\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe({\n            next: () => menu.lazyContent!.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._resetMenu()\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {_MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the selection list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._destroyed) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\nimport {MatAccordionTogglePosition} from './accordion-base';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {\n  getActiveOffset,\n  isSameMultiYearView,\n  MatMultiYearView,\n  yearsPerPage\n} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view, and the last year is\n    // just yearsPerPage - 1 away.\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n    return `${minYearOfPage} \\u2013 ${maxYearOfPage}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.close();\n    });\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    'aria-haspopup': 'dialog',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionTogglePosition} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215\n      this._elementRef.nativeElement.focus();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }))\n      .subscribe(event => {\n        event.preventDefault();\n        this.close();\n      });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-card',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  }\n})\nexport class MatCard {\n  // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {}\n}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              // @breaking-change 8.0.0 `animationMode` parameter to become required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle,\n                    select: boolean,\n                    isUserInput = false,\n                    deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve(() => this._updateModelValue(isUserInput));\n    } else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n\n  /** Syncs up the group's value with the model and emits the change event. */\n  private _updateModelValue(isUserInput: boolean) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.name]': 'null',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\n  @ViewChild('label', {static: false}) private _label: ElementRef;\n\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  get _labelChild() {\n    return this._labelChildNonStatic || this._labelChildStatic;\n  }\n\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  isDevMode,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n\n      if (isDevMode()) {\n        const nativeElement = _elementRef.nativeElement;\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\nimport {InjectionToken, ViewContainerRef} from '@angular/core';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the bottom sheet. */\n  scrollStrategy?: ScrollStrategy;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(event => {\n      if (!this.disableClose &&\n        (event.type !== 'keydown' || !hasModifierKey(event as KeyboardEvent))) {\n        event.preventDefault();\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: config.scrollStrategy || this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode, Version} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {VERSION as CDK_VERSION} from '@angular/cdk';\n\n// Private version constant to circumvent test/build issues,\n// i.e. avoid core to depend on the @angular/material primary entry-point\n// Can be removed once the Material primary entry-point no longer\n// re-exports all secondary entry-points\nconst VERSION = new Version('8.0.1-7a04788');\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._checkCdkVersionMatch();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether the material version matches the cdk version */\n  private _checkCdkVersionMatch(): void {\n    if (VERSION.full !== CDK_VERSION.full) {\n      console.warn(\n          'The Angular Material version (' + VERSION.full + ') does not match ' +\n          'the Angular CDK version (' + CDK_VERSION.full + ').\\n' +\n          'Please ensure the versions of these two packages exactly match.'\n      );\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this._onMousedown)\n        .set('mouseup', this._onPointerUp)\n        .set('mouseleave', this._onPointerUp)\n\n        .set('touchstart', this._onTouchStart)\n        .set('touchend', this._onPointerUp)\n        .set('touchcancel', this._onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this._runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this._runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private _runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.0.1-7a04788');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase { }\nconst _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["MatTabNav","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","MatTabLink","_tabNavBar","_elementRef","ngZone","platform","globalRippleOptions","tabIndex","_focusMonitor","animationMode","_this","_super","call","this","_tabLinkRipple","setupTriggerEvents","nativeElement","rippleConfig","parseInt","monitor","animation","enterDuration","exitDuration","get","_isActive","value","updateActiveLink","enumerable","configurable","disabled","stopMonitoring","decorators","type","Directive","args","exportAs","inputs","host","class","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","NgZone","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","ANIMATION_MODULE_TYPE","propDecorators","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatToolbarBase","_MatToolbarMixinBase","mixinColor","MatToolbarRow","selector","MatToolbar","elementRef","_platform","document","_document","tslib_1.__extends","prototype","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","Array","from","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","Component","template","styles","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","_node","ViewContainerRef","CDK_TREE_NODE_OUTLET_NODE","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","Input","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","ngAfterContentInit","ngOnDestroy","IterableDiffers","nodeOutlet","ContentChildren","descendants","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","CdkTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","pipe","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","_setStyles","element","show","style","visibility","hide","positions","_inkBarPositioner","inkBar","left","width","[class._mat-animation-noopable]","_MAT_INK_BAR_POSITIONER","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","static","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","_changeDetectorRef","_viewportRuler","_ngZone","_animationMode","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","runOutsideAngular","fromEvent","takeUntil","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","_onDestroy","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","(click)","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","MatSortHeader","start","disableClear","MatSortModule","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","providedIn","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","errorMessage","iconOverrides","selected","disableRipple","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","CdkStepper","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","factory","_MAT_INK_BAR_POSITIONER_FACTORY","trackSize","vertical","_sliderDimensions","pixelsPerStep","step","stepsPerTick","pixelsPerTick","_tickIntervalPercent","tickInterval","MatSlider","MatSliderChange","source","_calculatePercentage","_calculateValue","percentage","_clamp","_getSliderDimensions","_sliderWrapper","getBoundingClientRect","_focusHostElement","_blurHostElement","blur","writeValue","registerOnChange","fn","_controlValueAccessorChangeFn","registerOnTouched","onTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","thumbLabel","displayWith","input","valueChange","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","MatDrawerContainer","_validateDrawers","drawer","_drawers","_isDrawerOpen","_start","_end","updateContentMargins","_doCheckSubject","debounceTime","_contentMarginChanges","close","_left","mode","_width","_right","opened","_contentMargins","ngDoCheck","_element","openedChange","_setContainerClass","onPositionChanged","throwMatDuplicatedDrawerError","_onBackdropClicked","backdropClick","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","[class.mat-drawer-container-explicit-backdrop]","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_onChange","_","_onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","toggle","_getDragPercentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","closestValue","_strokeCircumference","_fallbackAnimation","MatProgressSpinner","strokeWidth","diameter","_attachStyleNode","styleTag","createElement","styleRoot","_styleRoot","currentDiameter","_diameter","diameters","_diameters","diametersForElement","setAttribute","_getAnimationText","appendChild","Set","INDETERMINATE_ANIMATION_TEMPLATE","replace","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_DEFAULT_OPTIONS","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","color","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_providerOverride","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_color","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","_animationEnd","_opened","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","HostBinding","_openedStream","openedStart","_closedStream","closedStart","_animationStartListener","HostListener","_animationDoneListener","viewportRuler","_autosize","defaultAutosize","_backdropOverride","sortComparator","selectionChange","MatSelect","MatSelectModule","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","_emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","trackedDiameters","head","_getShadowRoot","_noopAnimations","_forceAnimations","animationClass","_strokeWidth","viewBox","_circleRadius","PI","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","_MatMenu","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuContent","MatMenuModule","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","switchMap","option","onSelectionChange","onStable","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatListOption","_setSelected","selectionList","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","colorChanges","firstChange","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_MatMenuBase","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","defaultOptions","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","_hasFocus","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","expandedHeight","collapsedHeight","MatExpansionPanelHeader","_toggle","_isExpanded","expanded","_getExpandedState","_getPanelId","_getTogglePosition","togglePosition","_showToggle","hideToggle","_keydown","accordion","_handleHeaderKeydown","_parentChangeSubscription","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","[attr.aria-controls]","[class.mat-expanded]","[class.mat-expansion-toggle-indicator-after]","[class.mat-expansion-toggle-indicator-before]","[@expansionHeight]","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_hideToggle","displayMode","_headers","_handleHeaderFocus","header","MAT_ACCORDION","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatCalendar","MatDatepickerIntl","headerComponent","startAt","minDate","maxDate","dateFilter","dateClass","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","_setColor","_createPopup","datepicker","getConnectedOverlayOrigin","componentInstance","MatDialog","DateAdapter","calendarHeaderComponent","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","params","bodyExpansion","uniqueId","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_togglePosition","_hasSpacing","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expansion-panel-spacing]","accordionHideToggleChange","MatInput","AutofillMonitor","readonly","_MatInputMixinBase","MatInputModule","MatTextareaAutosize","TextFieldModule","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","MatCalendarCell","displayValue","cssClasses","numCols","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","columnChanges","rows","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","_focusActiveCell","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","yearsPerPage","isSameMultiYearView","_selectedYear","_todayYear","activeYear","minYearOfPage","getActiveOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","multi-year","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","correspondingChip","MatChipList","chips","chip","selectViaInteraction","_clearSelection","skip","MatChipListChange","_blur","_hasFocusedChip","_chipInput","focused","_markAsTouched","_allowFocusEscape","_tabIndex","_userTabIndex","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","_lastDestroyedChipIndex","_originatesFromChip","currentElement","parentElement","_syncChipsState","_chipListMultiple","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","TAB","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","overlayContainer","getContainerElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","minRows","maxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","_animationsDisabled","coercedValue","_dispatchSelectionChange","tagName","_removeTriggerEvents","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","parentChip","MatChipListBase","_MatChipListMixinBase","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","newChipIndex","MatButton","_hasHostAttributes","attribute","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","deferEvents","_updateModelValue","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","[attr.name]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_positionStrategy","_setStrategyPositions","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","withPush","belowPosition","abovePosition","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","[attr.aria-haspopup]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","getBadgeElement","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","isIconButton","BUTTON_HOST_ATTRIBUTES_1","_parent","_active","_mostRecentViewValue","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","year1","dateAdapter","year2","startingYear","getStartingYear","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","createShadowRoot","attachShadow","rootNode","getRootNode","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_checkCdkVersionMatch","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","full","CDK_VERSION","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","_onTouchStart","touches","changedTouches","_onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}
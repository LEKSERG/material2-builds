{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.3.3-e739e61');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n      // Update the trigger, panel width and direction, in case anything has changed.\n      position.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` and `_platforms` parameters to be made required.\n              private _ngZone?: NgZone,\n              private _platform?: Platform) {\n    super();\n\n    const element = _elementRef.nativeElement;\n    const bindEvent = () => {\n      fromEvent(element, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    };\n\n    // @breaking-change 8.0.0 remove null check once _ngZone is made into a required parameter.\n    if (_ngZone) {\n      // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n      _ngZone.runOutsideAngular(bindEvent);\n    } else {\n      bindEvent();\n    }\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      const zoneCallback = () => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      };\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 8.0.0 Remove null check for `platform`.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(\n          this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes.disableRipple;\n    const colorChanges = changes.color;\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list' && _elementRef) {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList,\n              // @breaking-change 8.0.0 `_changeDetectorRef` to be made into a required parameter.\n              _changeDetectorRef?: ChangeDetectorRef) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    // @breaking-change 8.0.0 Remove null check for _changeDetectorRef.\n    if (this._list && _changeDetectorRef) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes['svgIcon']) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsDisabledState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsDisabledState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's disabled state with the individual chips. */\n  private _syncChipsDisabledState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<any>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined as void))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': '_hasAriaLabel ? ariaLabel : null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  /**\n   * Whether the button should have an `aria-label`. Used for clearing the\n   * attribute to prevent it from being read instead of the button's text.\n   */\n  _hasAriaLabel?: boolean;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (typeof this._hasAriaLabel === 'undefined') {\n      const element = this._elementRef.nativeElement;\n\n      if (element.hasAttribute('mat-icon-button')) {\n        this._hasAriaLabel = true;\n      } else {\n        const buttonTextContent = element.textContent;\n        this._hasAriaLabel = !buttonTextContent || buttonTextContent.trim().length === 0;\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange =\n        changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n\n    if (changes.ariaLabel) {\n      this._hasAriaLabel = !!changes.ariaLabel.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // @breaking-change 7.0.0 Remove this check once _ngZone is required. Also reconsider\n    // whether the `ngAfterContentChecked` below is still necessary.\n    const zone = this._ngZone;\n\n    if (zone) {\n      // Note that we have to run outside of the `NgZone` explicitly,\n      // in order to avoid throwing users into an infinite loop\n      // if `zone-patch-rxjs` is included.\n      zone.runOutsideAngular(() => {\n        zone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n          if (this._outlineGapCalculationNeededOnStable) {\n            this.updateOutlineGap();\n          }\n        });\n      });\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /**\n   * Updates the outline gap the new time the zone stabilizes.\n   * @breaking-change 7.0.0 Remove this method and only set the property once `_ngZone` is required.\n   */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._outlineGapCalculationNeededOnStable = true;\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["role","type","Input","MatTreeNode","_MatTreeNodeMixinBase","MatTreeNodeDef","_super","tslib_1.__extends","Directive","args","selector","inputs","providers","provide","CdkTreeNodeDef","useExisting","data","MatNestedTreeNode","_elementRef","_tree","_differs","tabIndex","_this","call","this","Number","prototype","ngAfterContentInit","ngOnDestroy","exportAs","host","[attr.aria-expanded]","[attr.role]","class","CdkNestedTreeNode","CdkTreeNode","ElementRef","CdkTree","IterableDiffers","String","decorators","Attribute","node","nodeOutlet","ContentChildren","MatTreeNodeOutlet","_MatNestedTreeNodeMixinBase","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","Component","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","MatTreeNodeToggle","apply","arguments","recursive","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","_onCentered","EventEmitter","animationDuration","_dir","changeDetectorRef","_dirChangeSubscription","change","dir","_computePositionAnimationState","markForCheck","_translateTabComplete","distinctUntilChanged","x","y","fromState","toState","event","_isCenterPosition","_position","emit","_afterLeavingCenter","MatTabBody","position","_positionIndex","ngOnInit","origin","_computePositionFromOrigin","unsubscribe","complete","_onTranslateTabStarted","isCentering","_beforeCentering","_onCentering","nativeElement","clientHeight","_getLayoutDirection","animations","matTabsAnimations","translateTab","ChangeDetectorRef","Output","_portalHost","ViewChild","PortalHostDirective","_content","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","Subject","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","element","bindEvent","fromEvent","takeUntil","_stopInterval","runOutsideAngular","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","textContent","_currentTextContent","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","style","transform","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","NgZone","Platform","static","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","Inject","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatTabBodyPortal","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","document","_document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","ViewContainerRef","mixinTabIndex","[attr.aria-level]","MatStepHeader","_templateLabel","label","MatStepLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","state","errorMessage","iconOverrides","selected","disableRipple","matStepperAnimations","horizontalStepTransition","trigger","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","_animationDone","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MAT_STEPPER_INTL_PROVIDER","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","startWith","hasAttached","attach","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","MatStepperIntl","optionalLabel","MAT_STEPPER_INTL_PROVIDER_FACTORY","_intlSubscription","_stringLabel","_element","_drawers","drawer","_end","throwMatDuplicatedDrawerError","_start","_right","_left","MatDrawerContainer","_onBackdropClicked","backdropClick","_closeModalDrawer","disableClose","_canHaveBackdrop","close","_isShowingBackdrop","_isDrawerOpen","mode","_width","opened","_contentMargins","_contentMarginChanges","[class.mat-drawer-container-explicit-backdrop]","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","MatSpinner","animationMode","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","ESCAPE","_animationEnd","_opened","onPositionChanged","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","viewportRuler","_doCheckSubject","_validateDrawers","_updateContentMargins","_autosize","defaultAutosize","_backdropOverride","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","debounceTime","ngDoCheck","_setContainerClass","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","elementStyle","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_menuItemInstance","_triggersSubmenu","triggersSubmenu","MatMenuTrigger","menu","_menu","reason","_destroyMenu","_parentMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","_closingActionsSubscription","_menuOpen","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","MatMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","_hoverSubscription","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","MatListOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","colorChanges","firstChange","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","_setSelected","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","MAT_MENU_SCROLL_STRATEGY_FACTORY","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","_color","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","displayMode","MatAccordion","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelHeader","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","_headers","header","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","_hasAriaLabel","buttonTextContent","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_syncChipsDisabledState","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","underlineRef","_connectionContainerRef","_inputContainerRef","_placeholderChild","MatPlaceholder","_labelChild","MatLabel","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_updateTextContent","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","destroyNode","_createBadgeElement","rootNode","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","zone","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}
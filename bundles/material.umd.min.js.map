{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\n\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** The children node placeholder. */\n  @ContentChildren(MatTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.0.0-beta.2-99ef55b');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n      // Update the trigger, panel width and direction, in case anything has changed.\n      position.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _platform: Platform) {\n    super();\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    if (platform.TRIDENT || platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: MatTabNav, public _elementRef: ElementRef, ngZone: NgZone,\n      platform: Platform,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n    _focusMonitor.monitor(_elementRef);\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the selection list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  private _document: Document;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/material2/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["_this","_elementRef","_tree","role","tabIndex","Number","tslib_1.__extends","MatTreeNode","_super","type","Directive","args","selector","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","CdkTreeNode","useExisting","ElementRef","CdkTree","String","decorators","Attribute","Input","_MatTreeNodeMixinBase","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","call","this","prototype","ngAfterContentInit","ngOnDestroy","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","IterableDiffers","node","nodeOutlet","ContentChildren","MatTreeNodeOutlet","descendants","_MatNestedTreeNodeMixinBase","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","Component","template","styles","encapsulation","ViewEncapsulation","None","propDecorators","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","ComponentFactoryResolver","ViewContainerRef","MatTabBody","Inject","forwardRef","MatTabBodyPortal","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","Subscription","EMPTY","_translateTabComplete","Subject","_onCentering","EventEmitter","_beforeCentering","_afterLeavingCenter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","_isCenterPosition","_position","emit","position","_positionIndex","ngOnInit","origin","_computePositionFromOrigin","unsubscribe","complete","_onTranslateTabStarted","isCentering","nativeElement","clientHeight","_getLayoutDirection","changeDetection","ChangeDetectionStrategy","OnPush","animations","matTabsAnimations","translateTab","ChangeDetectorRef","Output","_portalHost","ViewChild","PortalHostDirective","static","_content","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","runOutsideAngular","fromEvent","takeUntil","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","textContent","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","style","transform","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","element","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","document","_document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","_node","mixinTabIndex","MatStepperIntl","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","_stringLabel","label","MatStepLabel","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","state","errorMessage","iconOverrides","selected","disableRipple","matStepperAnimations","horizontalStepTransition","trigger","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","_animationDone","CdkStepper","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","startWith","hasAttached","attach","detach","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","(click)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_validateDrawers","_updateContentMargins","_element","_drawers","drawer","_end","throwMatDuplicatedDrawerError","_start","_right","_left","MatDrawerContainer","_onBackdropClicked","backdropClick","_closeModalDrawer","disableClose","_canHaveBackdrop","close","_isShowingBackdrop","_isDrawerOpen","mode","_width","opened","_contentMargins","_contentMarginChanges","[class.mat-drawer-container-explicit-backdrop]","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","MatProgressSpinner","diameters","Set","BASE_SIZE","styleTag","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","animationMode","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","ESCAPE","_animationEnd","_opened","onPositionChanged","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","viewportRuler","_doCheckSubject","_autosize","defaultAutosize","_backdropOverride","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","debounceTime","ngDoCheck","_setContainerClass","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_diameter","_noopAnimations","_forceAnimations","diameter","strokeWidth","animationClass","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","MatMenuTrigger","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","MatMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","MatListOption","_setSelected","selectionList","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","colorChanges","firstChange","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","MAT_MENU_SCROLL_STRATEGY_FACTORY","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","_hasFocus","_color","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","hideToggle","displayMode","MatAccordion","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelHeader","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","_headers","header","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[class.mat-chip-list-required]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","chipListSelectable","_chipListMultiple","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_syncChipsState","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_placeholderChild","MatPlaceholder","_labelChild","MatLabel","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}
{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.3.3-e52adce');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n      // Update the trigger, panel width and direction, in case anything has changed.\n      position.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const selectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption !== this.selected) {\n        this._liveAnnouncer.announce((this.selected as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` and `_platforms` parameters to be made required.\n              private _ngZone?: NgZone,\n              private _platform?: Platform) {\n    super();\n\n    const element = _elementRef.nativeElement;\n    const bindEvent = () => {\n      fromEvent(element, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    };\n\n    // @breaking-change 8.0.0 remove null check once _ngZone is made into a required parameter.\n    if (_ngZone) {\n      // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n      _ngZone.runOutsideAngular(bindEvent);\n    } else {\n      bindEvent();\n    }\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      const zoneCallback = () => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      };\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 8.0.0 Remove null check for `platform`.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(\n          this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes.disableRipple;\n\n    if (disableRippleChanges && !disableRippleChanges.firstChange) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list' && _elementRef) {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList,\n              // @breaking-change 8.0.0 `_changeDetectorRef` to be made into a required parameter.\n              _changeDetectorRef?: ChangeDetectorRef) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    // @breaking-change 8.0.0 Remove null check for _changeDetectorRef.\n    if (this._list && _changeDetectorRef) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes['svgIcon']) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsDisabledState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsDisabledState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's disabled state with the individual chips. */\n  private _syncChipsDisabledState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': '_hasAriaLabel ? ariaLabel : null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  /**\n   * Whether the button should have an `aria-label`. Used for clearing the\n   * attribute to prevent it from being read instead of the button's text.\n   */\n  _hasAriaLabel?: boolean;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (typeof this._hasAriaLabel === 'undefined') {\n      const element = this._elementRef.nativeElement;\n\n      if (element.hasAttribute('mat-icon-button')) {\n        this._hasAriaLabel = true;\n      } else {\n        const buttonTextContent = element.textContent;\n        this._hasAriaLabel = !buttonTextContent || buttonTextContent.trim().length === 0;\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange =\n        changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n\n    if (changes.ariaLabel) {\n      this._hasAriaLabel = !!changes.ariaLabel.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // @breaking-change 7.0.0 Remove this check once _ngZone is required. Also reconsider\n    // whether the `ngAfterContentChecked` below is still necessary.\n    const zone = this._ngZone;\n\n    if (zone) {\n      // Note that we have to run outside of the `NgZone` explicitly,\n      // in order to avoid throwing users into an infinite loop\n      // if `zone-patch-rxjs` is included.\n      zone.runOutsideAngular(() => {\n        zone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n          if (this._outlineGapCalculationNeededOnStable) {\n            this.updateOutlineGap();\n          }\n        });\n      });\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /**\n   * Updates the outline gap the new time the zone stabilizes.\n   * @breaking-change 7.0.0 Remove this method and only set the property once `_ngZone` is required.\n   */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._outlineGapCalculationNeededOnStable = true;\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["_super","prototype","ngAfterContentInit","call","this","MatNestedTreeNode","ngOnDestroy","type","Directive","args","selector","exportAs","host","[attr.aria-expanded]","[attr.role]","class","inputs","providers","provide","CdkNestedTreeNode","useExisting","CdkTreeNode","ElementRef","CdkTree","IterableDiffers","String","decorators","Attribute","node","Input","nodeOutlet","ContentChildren","MatTreeNodeOutlet","_MatNestedTreeNodeMixinBase","MatTreeNodePadding","tslib_1.__extends","CdkTreeNodePadding","level","indent","MatTree","Component","template","role","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","MatTreeNodeToggle","_this","apply","arguments","recursive","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeNodeDef","MatTreeNode","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatTabBody","position","_positionIndex","_computePositionAnimationState","ngOnInit","_position","origin","_computePositionFromOrigin","_dirChangeSubscription","unsubscribe","_translateTabComplete","complete","_onTranslateTabStarted","event","isCentering","_isCenterPosition","toState","_beforeCentering","emit","_onCentering","_elementRef","nativeElement","clientHeight","_getLayoutDirection","_dir","dir","animations","matTabsAnimations","translateTab","ChangeDetectorRef","_afterLeavingCenter","Output","_onCentered","_portalHost","ViewChild","PortalHostDirective","_content","animationDuration","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","Subject","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","EventEmitter","indexFocused","element","bindEvent","fromEvent","takeUntil","_stopInterval","runOutsideAngular","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","change","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","textContent","_currentTextContent","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","style","transform","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","Inject","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatTabBodyPortal","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","document","_document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","mixinTabIndex","_tree","Number","[attr.aria-level]","CdkTreeNodeDef","_differs","MatStepHeader","_getDefaultTextForState","state","errorMessage","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","_animationDone","distinctUntilChanged","x","y","fromState","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","changeDetectorRef","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MAT_STEPPER_INTL_PROVIDER","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","startWith","hasAttached","attach","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","MatStepperIntl","optionalLabel","MAT_STEPPER_INTL_PROVIDER_FACTORY","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","_start","drawer","_right","_left","_end","MatDrawerContainer","_onBackdropClicked","backdropClick","_closeModalDrawer","disableClose","_canHaveBackdrop","close","_isShowingBackdrop","_isDrawerOpen","mode","_width","opened","_contentMargins","_contentMarginChanges","[class.mat-drawer-container-explicit-backdrop]","_drawers","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","MatSpinner","animationMode","[style.width.px]","[style.height.px]","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","ESCAPE","_animationEnd","_opened","onPositionChanged","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","viewportRuler","_element","_doCheckSubject","_validateDrawers","_updateContentMargins","_autosize","defaultAutosize","_backdropOverride","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","IOS","ANDROID","hasGestures","_manualListeners","listener","addEventListener","nodeName","elementStyle","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_defaultOptions","MatTooltip","_updatePosition","_tooltipInstance","updatePosition","_message","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","delay","showDelay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","hideDelay","isVisible","e","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","_scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","menu","MatMenuTrigger","_menu","_menuCloseSubscription","reason","_destroyMenu","_parentMenu","_checkMenu","_handleHover","_handleTouchStart","_cleanUpSubscriptions","_closingActionsSubscription","_menuOpen","triggersSubmenu","_menuItemInstance","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","MatMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","_openedBy","setElevation","depth","menuOpened","menuClosed","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","_hoverSubscription","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","onMenuClose","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","hammerLoader","window","Hammer","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","MatListOption","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","_setSelected","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","MAT_MENU_SCROLL_STRATEGY_FACTORY","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","displayMode","MatAccordion","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelHeader","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","_headers","header","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","_hasAriaLabel","buttonTextContent","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_syncChipsDisabledState","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","_labelChild","MatLabel","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","MatPlaceholder","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","destroyNode","_createBadgeElement","rootNode","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","zone","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}